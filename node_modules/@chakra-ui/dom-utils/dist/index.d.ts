declare const hasDisplayNone: (element: HTMLElement) => boolean;
declare const hasTabIndex: (element: HTMLElement) => boolean;
declare const hasNegativeTabIndex: (element: HTMLElement) => boolean;
declare function isDisabled(element: HTMLElement): boolean;
interface FocusableElement {
    focus(options?: FocusOptions): void;
}
declare function isInputElement(element: FocusableElement): element is HTMLInputElement;
declare function isActiveElement(element: FocusableElement): boolean;
declare function hasFocusWithin(element: HTMLElement): boolean;
declare function isHidden(element: HTMLElement): boolean;
declare function isContentEditable(element: HTMLElement): boolean;
declare function isFocusable(element: HTMLElement): boolean;
declare function isTabbable(element?: HTMLElement | null): boolean;

declare function isElement(el: any): el is Element;
declare function isHTMLElement(el: any): el is HTMLElement;
declare function getOwnerWindow(node?: Element | null): typeof globalThis;
declare function getOwnerDocument(node?: Element | null): Document;
declare function getEventWindow(event: Event): Window & typeof globalThis;
declare function isBrowser(): boolean;
declare function getActiveElement(node?: HTMLElement): HTMLElement;
declare function contains(parent: HTMLElement | null, child: HTMLElement): boolean;

declare function getAllFocusable<T extends HTMLElement>(container: T): T[];
declare function getFirstFocusable<T extends HTMLElement>(container: T): T | null;
declare function getAllTabbable<T extends HTMLElement>(container: T, fallbackToFocusable?: boolean): T[];
declare function getFirstTabbableIn<T extends HTMLElement>(container: T, fallbackToFocusable?: boolean): T | null;
declare function getLastTabbableIn<T extends HTMLElement>(container: T, fallbackToFocusable?: boolean): T | null;
declare function getNextTabbable<T extends HTMLElement>(container: T, fallbackToFocusable?: boolean): T | null;
declare function getPreviousTabbable<T extends HTMLElement>(container: T, fallbackToFocusable?: boolean): T | null;

export { FocusableElement, contains, getActiveElement, getAllFocusable, getAllTabbable, getEventWindow, getFirstFocusable, getFirstTabbableIn, getLastTabbableIn, getNextTabbable, getOwnerDocument, getOwnerWindow, getPreviousTabbable, hasDisplayNone, hasFocusWithin, hasNegativeTabIndex, hasTabIndex, isActiveElement, isBrowser, isContentEditable, isDisabled, isElement, isFocusable, isHTMLElement, isHidden, isInputElement, isTabbable };
