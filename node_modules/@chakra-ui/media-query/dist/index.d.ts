interface UseQueryProps {
    breakpoint?: string;
    below?: string;
    above?: string;
}
declare function useQuery(props: UseQueryProps): string;

declare type UseMediaQueryOptions = {
    fallback?: boolean | boolean[];
    ssr?: boolean;
};
/**
 * React hook that tracks state of a CSS media query
 *
 * @param query the media query to match
 * @param options the media query options { fallback, ssr }
 *
 * @see Docs https://chakra-ui.com/docs/hooks/use-media-query
 */
declare function useMediaQuery(query: string | string[], options?: UseMediaQueryOptions): boolean[];

/**
 * React hook used to get the user's animation preference.
 *
 * @see Docs https://chakra-ui.com/docs/hooks/use-prefers-reduced-motion
 */
declare function usePrefersReducedMotion(options?: UseMediaQueryOptions): boolean;
/**
 * React hook for getting the user's color mode preference.
 */
declare function useColorModePreference(options?: UseMediaQueryOptions): "dark" | "light" | undefined;

declare type UseBreakpointOptions = {
    ssr?: boolean;
    fallback?: string;
};
/**
 * React hook used to get the current responsive media breakpoint.
 *
 * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)
 * to get the default breakpoint value from the user-agent.
 */
declare function useBreakpoint(arg?: string | UseBreakpointOptions): string;

/**
 * React hook for getting the value for the current breakpoint from the
 * provided responsive values object.
 *
 * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)
 * to get the default breakpoint value from the user-agent
 *
 * @example
 * const width = useBreakpointValue({ base: '150px', md: '250px' })
 *
 * @see Docs https://chakra-ui.com/docs/hooks/use-breakpoint-value
 */
declare function useBreakpointValue<T = any>(values: Partial<Record<string, T>> | T[], arg?: UseBreakpointOptions | string): T | undefined;

interface ShowProps {
    /**
     * A custom css media query that determines when the `children` are rendered.
     * Will render `children` if that query resolves to `true`.
     */
    breakpoint?: string;
    /**
     * A value from the `breakpoints` section in the theme. Will render `children`
     * from that breakpoint and below. Default breakpoint values: `sm`, `md`, `lg`, `xl`, `2xl`.
     */
    below?: string;
    /**
     * A value from the `breakpoints` section in the theme. Will render `children`
     * from that breakpoint and above. Default breakpoint values: `sm`, `md`, `lg`, `xl`, `2xl`.
     */
    above?: string;
    ssr?: boolean;
    children?: React.ReactNode;
}
/**
 * `Show` wraps a component to render if the provided media query matches.
 *
 * @see Docs https://chakra-ui.com/docs/components/show-hide
 */
declare function Show(props: ShowProps): JSX.Element;
declare namespace Show {
    var displayName: string;
}

declare type HideProps = ShowProps;
/**
 * `Hide` wraps a component to not render if the provided media query matches.
 *
 * @see Docs https://chakra-ui.com/docs/components/show-hide
 */
declare function Hide(props: HideProps): JSX.Element;
declare namespace Hide {
    var displayName: string;
}

export { Hide, HideProps, Show, ShowProps, UseBreakpointOptions, UseMediaQueryOptions, UseQueryProps, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };
