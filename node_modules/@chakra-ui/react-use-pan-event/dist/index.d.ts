declare type Point = {
    x: number;
    y: number;
};
/**
 * The event information passed to pan event handlers like `onPan`, `onPanStart`.
 *
 * It contains information about the current state of the tap gesture such as its
 * `point`, `delta`, and `offset`
 */
interface PanEventInfo {
    /**
     * Contains `x` and `y` values for the current pan position relative
     * to the device or page.
     */
    point: Point;
    /**
     * Contains `x` and `y` values for the distance moved since
     * the last pan event.
     */
    delta: Point;
    /**
     * Contains `x` and `y` values for the distance moved from
     * the first pan event.
     */
    offset: Point;
    /**
     * Contains `x` and `y` values for the current velocity of the pointer.
     */
    velocity: Point;
}
declare type AnyPointerEvent = TouchEvent | MouseEvent | PointerEvent;
interface PanEventHandler {
    (event: AnyPointerEvent, info: PanEventInfo): void;
}

interface UsePanEventProps {
    onPan?: PanEventHandler;
    onPanStart?: PanEventHandler;
    onPanEnd?: PanEventHandler;
    onPanSessionStart?: PanEventHandler;
    onPanSessionEnd?: PanEventHandler;
    threshold?: number;
}
declare function usePanEvent(ref: React.RefObject<HTMLElement>, options: UsePanEventProps): void;

export { UsePanEventProps, usePanEvent };
