import * as _chakra_ui_system from '@chakra-ui/system';
import { HTMLChakraProps, SystemStyleObject, ThemingProps } from '@chakra-ui/system';
import { IconProps } from '@chakra-ui/icon';
import * as _chakra_ui_descendant from '@chakra-ui/descendant';
import * as react from 'react';
import { CollapseProps } from '@chakra-ui/transition';

interface AccordionButtonProps extends HTMLChakraProps<"button"> {
}
/**
 * AccordionButton is used expands and collapses an accordion item.
 * It must be a child of `AccordionItem`.
 *
 * Note ðŸš¨: Each accordion button must be wrapped in a heading tag,
 * that is appropriate for the information architecture of the page.
 */
declare const AccordionButton: _chakra_ui_system.ComponentWithAs<"button", AccordionButtonProps>;

declare type ExpandedIndex = number | number[];
interface UseAccordionProps {
    /**
     * If `true`, multiple accordion items can be expanded at once.
     */
    allowMultiple?: boolean;
    /**
     * If `true`, any expanded accordion item can be collapsed again.
     */
    allowToggle?: boolean;
    /**
     * The index(es) of the expanded accordion item
     */
    index?: ExpandedIndex;
    /**
     * The initial index(es) of the expanded accordion item
     */
    defaultIndex?: ExpandedIndex;
    /**
     * The callback invoked when accordion items are expanded or collapsed.
     */
    onChange?(expandedIndex: ExpandedIndex): void;
}
/**
 * useAccordion hook provides all the state and focus management logic
 * for accordion items.
 *
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/accordion/
 */
declare function useAccordion(props: UseAccordionProps): {
    index: ExpandedIndex;
    setIndex: react.Dispatch<react.SetStateAction<ExpandedIndex>>;
    htmlProps: {};
    getAccordionItemProps: (idx: number | null) => {
        isOpen: boolean;
        onChange: (isOpen: boolean) => void;
    };
    focusedIndex: number;
    setFocusedIndex: react.Dispatch<react.SetStateAction<number>>;
    descendants: _chakra_ui_descendant.DescendantsManager<HTMLButtonElement, {}>;
};
declare type UseAccordionReturn = ReturnType<typeof useAccordion>;
interface AccordionContext extends Omit<UseAccordionReturn, "htmlProps" | "descendants"> {
    reduceMotion: boolean;
}
declare const AccordionProvider: react.Provider<AccordionContext>;
declare const useAccordionContext: () => AccordionContext;
interface UseAccordionItemProps {
    /**
     * If `true`, the accordion item will be disabled.
     */
    isDisabled?: boolean;
    /**
     * If `true`, the accordion item will be focusable.
     */
    isFocusable?: boolean;
    /**
     * A unique id for the accordion item.
     */
    id?: string;
}
/**
 * useAccordionItem
 *
 * React hook that provides the open/close functionality
 * for an accordion item and its children
 */
declare function useAccordionItem(props: UseAccordionItemProps): {
    isOpen: boolean;
    isDisabled: boolean | undefined;
    isFocusable: boolean | undefined;
    onOpen: () => void;
    onClose: () => void;
    getButtonProps: (props?: Omit<React.HTMLAttributes<HTMLElement>, "color">, ref?: React.Ref<HTMLButtonElement> | null) => React.ComponentProps<"button">;
    getPanelProps: <T>(props?: Omit<react.HTMLAttributes<T>, "color">, ref?: react.Ref<T>) => react.HTMLAttributes<T> & react.RefAttributes<T>;
    htmlProps: {};
};
declare type UseAccordionItemReturn = ReturnType<typeof useAccordionItem>;

declare const useAccordionStyles: () => Record<string, SystemStyleObject>;

/**
 * AccordionIcon that gives a visual cue of the open/close state of the accordion item.
 * It rotates `180deg` based on the open/close state.
 */
declare function AccordionIcon(props: IconProps): JSX.Element;
declare namespace AccordionIcon {
    var displayName: string;
}

interface AccordionItemProps extends Omit<HTMLChakraProps<"div">, keyof UseAccordionItemProps | "children">, UseAccordionItemProps {
    children?: React.ReactNode | ((props: {
        isExpanded: boolean;
        isDisabled: boolean;
    }) => React.ReactNode);
}
/**
 * AccordionItem is a single accordion that provides the open-close
 * behavior when the accordion button is clicked.
 *
 * It also provides context for the accordion button and panel.
 */
declare const AccordionItem: _chakra_ui_system.ComponentWithAs<"div", AccordionItemProps>;

interface AccordionPanelProps extends HTMLChakraProps<"div"> {
    /**
     * The properties passed to the underlying `Collapse` component.
     */
    motionProps?: CollapseProps;
}
/**
 * Accordion panel that holds the content for each accordion.
 * It shows and hides based on the state login from the `AccordionItem`.
 *
 * It uses the `Collapse` component to animate its height.
 */
declare const AccordionPanel: _chakra_ui_system.ComponentWithAs<"div", AccordionPanelProps>;

interface AccordionProps extends UseAccordionProps, Omit<HTMLChakraProps<"div">, keyof UseAccordionProps>, ThemingProps<"Accordion"> {
    /**
     * If `true`, height animation and transitions will be disabled.
     */
    reduceMotion?: boolean;
}
/**
 * The wrapper that provides context and focus management
 * for all accordion items.
 *
 * It wraps all accordion items in a `div` for better grouping.
 * @see Docs https://chakra-ui.com/accordion
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/accordion/
 */
declare const Accordion: _chakra_ui_system.ComponentWithAs<"div", AccordionProps>;

/**
 * React hook to get the state and actions of an accordion item
 */
declare function useAccordionItemState(): {
    isOpen: boolean;
    onClose: () => void;
    isDisabled: boolean | undefined;
    onOpen: () => void;
};

export { Accordion, AccordionButton, AccordionButtonProps, AccordionIcon, AccordionItem, AccordionItemProps, AccordionPanel, AccordionPanelProps, AccordionProps, AccordionProvider, ExpandedIndex, UseAccordionItemProps, UseAccordionItemReturn, UseAccordionProps, UseAccordionReturn, useAccordion, useAccordionContext, useAccordionItem, useAccordionItemState, useAccordionStyles };
