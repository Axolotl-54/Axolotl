import * as _chakra_ui_color_mode from '@chakra-ui/color-mode';
export * from '@chakra-ui/color-mode';
import { SystemProps, ResponsiveValue, SystemStyleObject, StyleProps, ThemingProps, WithCSSVar } from '@chakra-ui/styled-system';
export * from '@chakra-ui/styled-system';
import { Interpolation, ThemeProviderProps as ThemeProviderProps$1 } from '@emotion/react';
export { Interpolation, keyframes } from '@emotion/react';
import { Dict, StringOrNumber } from '@chakra-ui/utils';
import * as react from 'react';
import { CreateContextReturn } from '@chakra-ui/react-utils';
import { CSSObject, FunctionInterpolation } from '@emotion/styled';

declare function useChakra<T extends Dict = Dict>(): {
    theme: T;
    forced?: boolean | undefined;
    colorMode: _chakra_ui_color_mode.ColorMode;
    toggleColorMode: () => void;
    setColorMode: (value: any) => void;
};
/**
 * `useToken` is a custom hook used to resolve design tokens from the theme.
 *
 * @see Docs https://chakra-ui.com/docs/hooks/use-token
 */
declare function useToken<T extends StringOrNumber | StringOrNumber[]>(scale: string, token: T, fallback?: T): T;
declare function getToken<T extends StringOrNumber | StringOrNumber[]>(scale: string, token: T, fallback?: T): (theme: Dict) => T;

interface ChakraProps extends SystemProps {
    /**
     * Used to truncate text at a specific number of lines
     */
    noOfLines?: ResponsiveValue<number>;
    /**
     * Used for internal css management
     * @private
     */
    __css?: SystemStyleObject;
    /**
     * Used to pass theme-aware style props.
     * NB: This is the public API for user-land
     */
    sx?: SystemStyleObject;
    /**
     * The emotion's css style object
     */
    css?: Interpolation<{}>;
}
declare type As<Props = any> = React.ElementType<Props>;
/**
 * Extract the props of a React element or component
 */
declare type PropsOf<T extends As> = React.ComponentPropsWithoutRef<T> & {
    as?: As;
};
declare type OmitCommonProps<Target, OmitAdditionalProps extends keyof any = never> = Omit<Target, "transition" | "as" | "color" | OmitAdditionalProps>;
declare type RightJoinProps<SourceProps extends object = {}, OverrideProps extends object = {}> = OmitCommonProps<SourceProps, keyof OverrideProps> & OverrideProps;
declare type MergeWithAs<ComponentProps extends object, AsProps extends object, AdditionalProps extends object = {}, AsComponent extends As = As> = RightJoinProps<ComponentProps, AdditionalProps> & RightJoinProps<AsProps, AdditionalProps> & {
    as?: AsComponent;
};
declare type ComponentWithAs<Component extends As, Props extends object = {}> = {
    <AsComponent extends As = Component>(props: MergeWithAs<React.ComponentProps<Component>, React.ComponentProps<AsComponent>, Props, AsComponent>): JSX.Element;
    displayName?: string;
    propTypes?: React.WeakValidationMap<any>;
    contextTypes?: React.ValidationMap<any>;
    defaultProps?: Partial<any>;
    id?: string;
};
interface ChakraComponent<T extends As, P = {}> extends ComponentWithAs<T, ChakraProps & P> {
}

interface ThemeProviderProps extends ThemeProviderProps$1 {
    cssVarsRoot?: string;
}
declare function ThemeProvider(props: ThemeProviderProps): JSX.Element;
interface CSSVarsProps {
    /**
     * The element to attach the CSS custom properties to.
     * @default ":host, :root"
     */
    root?: string;
}
declare function CSSVars({ root }: CSSVarsProps): JSX.Element;
/**
 * @deprecated - Prefer to use `createStylesContext` to provide better error messages
 *
 * @example
 *
 * ```jsx
 * import { createStylesContext } from "@chakra-ui/react"
 *
 * const [StylesProvider, useStyles] = createStylesContext("Component")
 * ```
 */
declare const StylesProvider: react.Provider<Record<string, SystemStyleObject>>;
declare const useStyles: () => Record<string, SystemStyleObject>;

/**
 * Helper function that creates context with a standardized errorMessage related to the component
 * @param componentName
 * @returns [StylesProvider, useStyles]
 */
declare function createStylesContext(componentName: string): CreateStyleContextReturn;
declare type CreateStyleContextReturn = CreateContextReturn<Record<string, SystemStyleObject>>;
/**
 * Applies styles defined in `theme.styles.global` globally
 * using emotion's `Global` component
 */
declare function GlobalStyle(): JSX.Element;

/**
 * All html and svg elements for chakra components.
 * This is mostly for `chakra.<element>` syntax.
 */
declare type DOMElements = keyof JSX.IntrinsicElements;

declare type StyleResolverProps = SystemStyleObject & {
    __css?: SystemStyleObject;
    sx?: SystemStyleObject;
    theme: any;
    css?: CSSObject;
};
interface GetStyleObject {
    (options: {
        baseStyle?: SystemStyleObject | ((props: StyleResolverProps) => SystemStyleObject);
    }): FunctionInterpolation<StyleResolverProps>;
}
/**
 * Style resolver function that manages how style props are merged
 * in combination with other possible ways of defining styles.
 *
 * For example, take a component defined this way:
 * ```jsx
 * <Box fontSize="24px" sx={{ fontSize: "40px" }}></Box>
 * ```
 *
 * We want to manage the priority of the styles properly to prevent unwanted
 * behaviors. Right now, the `sx` prop has the highest priority so the resolved
 * fontSize will be `40px`
 */
declare const toCSSObject: GetStyleObject;
interface ChakraStyledOptions extends Dict {
    shouldForwardProp?(prop: string): boolean;
    label?: string;
    baseStyle?: SystemStyleObject | ((props: StyleResolverProps) => SystemStyleObject);
}
declare function styled<T extends As, P = {}>(component: T, options?: ChakraStyledOptions): ChakraComponent<T, P>;
declare type HTMLChakraComponents = {
    [Tag in DOMElements]: ChakraComponent<Tag, {}>;
};
declare type HTMLChakraProps<T extends As> = Omit<PropsOf<T>, "ref" | keyof StyleProps> & ChakraProps & {
    as?: As;
};

declare function forwardRef<Props extends object, Component extends As>(component: React.ForwardRefRenderFunction<any, RightJoinProps<PropsOf<Component>, Props> & {
    as?: As;
}>): ComponentWithAs<Component, Props>;

declare function useStyleConfig(themeKey: string, props?: ThemingProps & Dict): SystemStyleObject;
declare function useMultiStyleConfig(themeKey: string, props?: ThemingProps & Dict): Record<string, SystemStyleObject>;
declare type MultipartStyles = Record<string, SystemStyleObject>;
declare function useComponentStyles__unstable(themeKey: string, props: ThemingProps & {
    baseConfig: any;
}): MultipartStyles;

declare type ChakraFactory = {
    <T extends As, P = {}>(component: T, options?: ChakraStyledOptions): ChakraComponent<T, P>;
};
/**
 * The Chakra factory serves as an object of chakra enabled JSX elements,
 * and also a function that can be used to enable custom component receive chakra's style props.
 *
 * @see Docs https://chakra-ui.com/docs/styled-system/chakra-factory
 */
declare const chakra: ChakraFactory & HTMLChakraComponents;

declare function shouldForwardProp(prop: string): boolean;

/**
 * `useTheme` is a custom hook used to get the theme object from context.
 *
 * @see Docs https://chakra-ui.com/docs/hooks/use-theme
 */
declare function useTheme<T extends object = Dict>(): WithCSSVar<T>;

export { As, CSSVars, CSSVarsProps, ChakraComponent, ChakraProps, ChakraStyledOptions, ComponentWithAs, CreateStyleContextReturn, GlobalStyle, HTMLChakraComponents, HTMLChakraProps, MergeWithAs, OmitCommonProps, PropsOf, RightJoinProps, StylesProvider, ThemeProvider, ThemeProviderProps, chakra, createStylesContext, forwardRef, getToken, shouldForwardProp, styled, toCSSObject, useChakra, useComponentStyles__unstable, useMultiStyleConfig, useStyleConfig, useStyles, useTheme, useToken };
