import * as _chakra_ui_system from '@chakra-ui/system';
import { SystemStyleObject, ThemingProps, HTMLChakraProps } from '@chakra-ui/system';
import * as react from 'react';
import * as _chakra_ui_react_types from '@chakra-ui/react-types';
import { PropGetter, RequiredPropGetter } from '@chakra-ui/react-types';

interface UseRangeSliderProps {
    /**
     * The minimum allowed value of the slider. Cannot be greater than max.
     * @default 0
     */
    min?: number;
    /**
     * The maximum allowed value of the slider. Cannot be less than min.
     * @default 100
     */
    max?: number;
    /**
     * The step in which increments/decrements have to be made
     * @default 1
     */
    step?: number;
    /**
     * The value of the slider in controlled mode
     */
    value?: number[];
    /**
     * The initial value of the slider in uncontrolled mode
     */
    defaultValue?: number[];
    /**
     * Orientation of the slider
     * @default "horizontal"
     */
    orientation?: "horizontal" | "vertical";
    /**
     * If `true`, the value will be incremented or decremented in reverse.
     */
    isReversed?: boolean;
    /**
     * Function called when the user starts selecting a new value (by dragging or clicking)
     */
    onChangeStart?(value: number[]): void;
    /**
     * Function called when the user is done selecting a new value (by dragging or clicking)
     */
    onChangeEnd?(value: number[]): void;
    /**
     * Function called whenever the slider value changes  (by dragging or clicking)
     */
    onChange?(value: number[]): void;
    /**
     * The base `id` to use for the slider and its components
     */
    id?: string;
    /**
     * The name attribute of the hidden `input` field.
     * This is particularly useful in forms
     */
    name?: string | string[];
    /**
     * If `true`, the slider will be disabled
     */
    isDisabled?: boolean;
    /**
     * If `true`, the slider will be in `read-only` state
     */
    isReadOnly?: boolean;
    /**
     * Function that returns the `aria-valuetext` for screen readers.
     * It is mostly used to generate a more human-readable
     * representation of the value for assistive technologies
     */
    getAriaValueText?(value: number): string;
    /**
     * If `false`, the slider handle will not capture focus when value changes.
     * @default true
     */
    focusThumbOnChange?: boolean;
    /**
     * The static string to use used for `aria-valuetext`
     */
    "aria-valuetext"?: string[];
    /**
     * The static string to use used for `aria-label`
     * if no visible label is used.
     */
    "aria-label"?: string[];
    /**
     * The static string `aria-labelledby` that points to the
     * ID of the element that serves as label for the slider
     */
    "aria-labelledby"?: string[];
    /**
     * The writing mode
     * @default "ltr"
     */
    direction?: "ltr" | "rtl";
    /**
     * The minimum distance between slider thumbs. Useful for preventing
     * the thumbs from being too close together.
     * @default 0
     */
    minStepsBetweenThumbs?: number;
}
/**
 * React hook that implements an accessible range slider.
 *
 * It is an alternative to `<input type="range" />`, and returns
 * prop getters for the component parts
 *
 * @see Docs     https://chakra-ui.com/docs/form/slider
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slidertwothumb/
 */
declare function useRangeSlider(props: UseRangeSliderProps): {
    state: {
        value: number[];
        isFocused: boolean;
        isDragging: boolean;
        getThumbPercent: (index: number) => number;
        getThumbMinValue: (index: number) => number;
        getThumbMaxValue: (index: number) => number;
    };
    actions: {
        setValueAtIndex(index: number, val: number): void;
        setActiveIndex: react.Dispatch<react.SetStateAction<number>>;
        stepUp(index: number, step?: number): void;
        stepDown(index: number, step?: number): void;
        reset(): void;
    };
    getRootProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getTrackProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getInnerTrackProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getThumbProps: RequiredPropGetter<{
        index: number;
    }, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getMarkerProps: RequiredPropGetter<{
        value: number;
    }, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getInputProps: RequiredPropGetter<{
        index: number;
    }, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getOutputProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
};
declare type UseRangeSliderReturn = ReturnType<typeof useRangeSlider>;

interface RangeSliderContext extends Omit<UseRangeSliderReturn, "getRootProps"> {
    name?: string | string[];
}
declare const RangeSliderProvider: react.Provider<RangeSliderContext>;
declare const useRangeSliderContext: () => RangeSliderContext;
declare const useRangeSliderStyles: () => Record<string, SystemStyleObject>;

interface RangeSliderProps extends UseRangeSliderProps, ThemingProps<"Slider">, Omit<HTMLChakraProps<"div">, keyof UseRangeSliderProps> {
}
/**
 * The Slider is used to allow users to make selections from a range of values.
 * It provides context and functionality for all slider components
 *
 * @see Docs     https://chakra-ui.com/docs/form/slider
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slidertwothumb/
 */
declare const RangeSlider: _chakra_ui_system.ComponentWithAs<"div", RangeSliderProps>;
interface RangeSliderThumbProps extends HTMLChakraProps<"div"> {
    index: number;
}
/**
 * Slider component that acts as the handle used to select predefined
 * values by dragging its handle along the track
 */
declare const RangeSliderThumb: _chakra_ui_system.ComponentWithAs<"div", RangeSliderThumbProps>;
interface RangeSliderTrackProps extends HTMLChakraProps<"div"> {
}
declare const RangeSliderTrack: _chakra_ui_system.ComponentWithAs<"div", RangeSliderTrackProps>;
interface RangeSliderInnerTrackProps extends HTMLChakraProps<"div"> {
}
declare const RangeSliderFilledTrack: _chakra_ui_system.ComponentWithAs<"div", RangeSliderInnerTrackProps>;
interface RangeSliderMarkProps extends HTMLChakraProps<"div"> {
    value: number;
}
/**
 * SliderMark is used to provide names for specific Slider
 * values by defining labels or markers along the track.
 *
 * @see Docs https://chakra-ui.com/slider
 */
declare const RangeSliderMark: _chakra_ui_system.ComponentWithAs<"div", RangeSliderMarkProps>;

interface UseSliderProps {
    /**
     * The minimum allowed value of the slider. Cannot be greater than max.
     * @default 0
     */
    min?: number;
    /**
     * The maximum allowed value of the slider. Cannot be less than min.
     * @default 100
     */
    max?: number;
    /**
     * The step in which increments/decrements have to be made
     * @default 1
     */
    step?: number;
    /**
     * The value of the slider in controlled mode
     */
    value?: number;
    /**
     * The initial value of the slider in uncontrolled mode
     */
    defaultValue?: number;
    /**
     * Orientation of the slider
     * @default "horizontal"
     */
    orientation?: "horizontal" | "vertical";
    /**
     * If `true`, the value will be incremented or decremented in reverse.
     */
    isReversed?: boolean;
    /**
     * Function called when the user starts selecting a new value (by dragging or clicking)
     */
    onChangeStart?(value: number): void;
    /**
     * Function called when the user is done selecting a new value (by dragging or clicking)
     */
    onChangeEnd?(value: number): void;
    /**
     * Function called whenever the slider value changes  (by dragging or clicking)
     */
    onChange?(value: number): void;
    /**
     * The base `id` to use for the slider and its components
     */
    id?: string;
    /**
     * The name attribute of the hidden `input` field.
     * This is particularly useful in forms
     */
    name?: string;
    /**
     * If `true`, the slider will be disabled
     */
    isDisabled?: boolean;
    /**
     * If `true`, the slider will be in `read-only` state
     */
    isReadOnly?: boolean;
    /**
     * Function that returns the `aria-valuetext` for screen readers.
     * It is mostly used to generate a more human-readable
     * representation of the value for assistive technologies
     */
    getAriaValueText?(value: number): string;
    /**
     * If `false`, the slider handle will not capture focus when value changes.
     * @default true
     */
    focusThumbOnChange?: boolean;
    /**
     * The static string to use used for `aria-valuetext`
     */
    "aria-valuetext"?: string;
    /**
     * The static string to use used for `aria-label`
     * if no visible label is used.
     */
    "aria-label"?: string;
    /**
     * The static string `aria-labelledby` that points to the
     * ID of the element that serves as label for the slider
     */
    "aria-labelledby"?: string;
    /**
     * The writing mode
     * @default "ltr"
     */
    direction?: "ltr" | "rtl";
}
/**
 * React hook that implements an accessible range slider.
 *
 * It is an alternative to `<input type="range" />`, and returns
 * prop getters for the component parts
 *
 * @see Docs     https://chakra-ui.com/docs/form/slider
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slider/
 */
declare function useSlider(props: UseSliderProps): {
    state: {
        value: number;
        isFocused: boolean;
        isDragging: boolean;
    };
    actions: {
        stepUp(step?: number): void;
        stepDown(step?: number): void;
        reset(): void;
        stepTo(value: number): void;
    };
    getRootProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getTrackProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getInnerTrackProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getThumbProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getMarkerProps: RequiredPropGetter<{
        value: number;
    }, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getInputProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
};
declare type UseSliderReturn = ReturnType<typeof useSlider>;

interface SliderContext extends Omit<UseSliderReturn, "getInputProps" | "getRootProps"> {
}
declare const SliderProvider: react.Provider<SliderContext>;
declare const useSliderContext: () => SliderContext;
declare const useSliderStyles: () => Record<string, SystemStyleObject>;

interface SliderProps extends UseSliderProps, ThemingProps<"Slider">, Omit<HTMLChakraProps<"div">, keyof UseSliderProps> {
}
/**
 * The Slider is used to allow users to make selections from a range of values.
 * It provides context and functionality for all slider components
 *
 * @see Docs     https://chakra-ui.com/docs/form/slider
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slider/
 */
declare const Slider: _chakra_ui_system.ComponentWithAs<"div", SliderProps>;
interface SliderThumbProps extends HTMLChakraProps<"div"> {
}
/**
 * Slider component that acts as the handle used to select predefined
 * values by dragging its handle along the track
 */
declare const SliderThumb: _chakra_ui_system.ComponentWithAs<"div", SliderThumbProps>;
interface SliderTrackProps extends HTMLChakraProps<"div"> {
}
declare const SliderTrack: _chakra_ui_system.ComponentWithAs<"div", SliderTrackProps>;
interface SliderInnerTrackProps extends HTMLChakraProps<"div"> {
}
declare const SliderFilledTrack: _chakra_ui_system.ComponentWithAs<"div", SliderInnerTrackProps>;
interface SliderMarkProps extends HTMLChakraProps<"div"> {
    value: number;
}
/**
 * SliderMark is used to provide names for specific Slider
 * values by defining labels or markers along the track.
 *
 * @see Docs https://chakra-ui.com/slider
 */
declare const SliderMark: _chakra_ui_system.ComponentWithAs<"div", SliderMarkProps>;

export { RangeSlider, RangeSliderFilledTrack, RangeSliderInnerTrackProps, RangeSliderMark, RangeSliderMarkProps, RangeSliderProps, RangeSliderProvider, RangeSliderThumb, RangeSliderThumbProps, RangeSliderTrack, RangeSliderTrackProps, Slider, SliderFilledTrack, SliderInnerTrackProps, SliderMark, SliderMarkProps, SliderProps, SliderProvider, SliderThumb, SliderThumbProps, SliderTrack, SliderTrackProps, UseRangeSliderProps, UseRangeSliderReturn, UseSliderProps, UseSliderReturn, useRangeSlider, useRangeSliderContext, useRangeSliderStyles, useSlider, useSliderContext, useSliderStyles };
