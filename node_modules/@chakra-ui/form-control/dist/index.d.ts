import * as _chakra_ui_system from '@chakra-ui/system';
import { SystemStyleObject, HTMLChakraProps, ThemingProps } from '@chakra-ui/system';
import * as _chakra_ui_react_types from '@chakra-ui/react-types';
import { PropGetter } from '@chakra-ui/react-types';
import * as react from 'react';
import { IconProps } from '@chakra-ui/icon';

declare const useFormControlStyles: () => Record<string, SystemStyleObject>;

interface FormControlOptions {
    /**
     * If `true`, the form control will be required. This has 2 side effects:
     * - The `FormLabel` will show a required indicator
     * - The form element (e.g, Input) will have `aria-required` set to `true`
     */
    isRequired?: boolean;
    /**
     * If `true`, the form control will be disabled. This has 2 side effects:
     * - The `FormLabel` will have `data-disabled` attribute
     * - The form element (e.g, Input) will be disabled
     */
    isDisabled?: boolean;
    /**
     * If `true`, the form control will be invalid. This has 2 side effects:
     * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`
     * - The form element (e.g, Input) will have `aria-invalid` set to `true`
     */
    isInvalid?: boolean;
    /**
     * If `true`, the form control will be readonly
     */
    isReadOnly?: boolean;
}
interface FormControlContext extends FormControlOptions {
    /**
     * The label text used to inform users as to what information is
     * requested for a text field.
     */
    label?: string;
    /**
     * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).
     * - The form element (e.g. Input) gets the `id`
     * - The form label id: `form-label-${id}`
     * - The form error text id: `form-error-text-${id}`
     * - The form helper text id: `form-helper-text-${id}`
     */
    id?: string;
}
declare type FormControlProviderContext = Omit<ReturnType<typeof useFormControlProvider>, "getRootProps" | "htmlProps">;
declare const useFormControlContext: () => FormControlProviderContext;
declare function useFormControlProvider(props: FormControlContext): {
    isRequired: boolean;
    isInvalid: boolean;
    isReadOnly: boolean;
    isDisabled: boolean;
    isFocused: boolean;
    onFocus: () => void;
    onBlur: () => void;
    hasFeedbackText: boolean;
    setHasFeedbackText: react.Dispatch<react.SetStateAction<boolean>>;
    hasHelpText: boolean;
    setHasHelpText: react.Dispatch<react.SetStateAction<boolean>>;
    id: string;
    labelId: string;
    feedbackId: string;
    helpTextId: string;
    htmlProps: {
        /**
         * The label text used to inform users as to what information is
         * requested for a text field.
         */
        label?: string | undefined;
    };
    getHelpTextProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getErrorMessageProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getRootProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getLabelProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getRequiredIndicatorProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
};
interface FormControlProps extends HTMLChakraProps<"div">, ThemingProps<"FormControl">, FormControlContext {
}
/**
 * FormControl provides context such as
 * `isInvalid`, `isDisabled`, and `isRequired` to form elements.
 *
 * This is commonly used in form elements such as `input`,
 * `select`, `textarea`, etc.
 *
 * @see Docs https://chakra-ui.com/docs/components/form-control
 */
declare const FormControl: _chakra_ui_system.ComponentWithAs<"div", FormControlProps>;
interface HelpTextProps extends HTMLChakraProps<"div"> {
}
/**
 * FormHelperText
 *
 * Assistive component that conveys additional guidance
 * about the field, such as how it will be used and what
 * types in values should be provided.
 */
declare const FormHelperText: _chakra_ui_system.ComponentWithAs<"div", HelpTextProps>;

interface UseFormControlProps<T extends HTMLElement> extends FormControlOptions {
    id?: string;
    onFocus?: React.FocusEventHandler<T>;
    onBlur?: React.FocusEventHandler<T>;
    disabled?: boolean;
    readOnly?: boolean;
    required?: boolean;
    "aria-describedby"?: string;
}
/**
 * React hook that provides the props that should be spread on to
 * input fields (`input`, `select`, `textarea`, etc.).
 *
 * It provides a convenient way to control a form fields, validation
 * and helper text.
 *
 * @internal
 */
declare function useFormControl<T extends HTMLElement>(props: UseFormControlProps<T>): {
    disabled: boolean;
    readOnly: boolean;
    required: boolean;
    "aria-invalid": boolean | undefined;
    "aria-required": boolean | undefined;
    "aria-readonly": boolean | undefined;
    "aria-describedby": string | undefined;
    id: string;
    onFocus: (event: react.FocusEvent<T, Element>) => void;
    onBlur: (event: react.FocusEvent<T, Element>) => void;
};
/**
 * @internal
 */
declare function useFormControlProps<T extends HTMLElement>(props: UseFormControlProps<T>): {
    "aria-describedby": string | undefined;
    id: string;
    isDisabled: boolean;
    isReadOnly: boolean;
    isRequired: boolean;
    isInvalid: boolean;
    onFocus: (event: react.FocusEvent<T, Element>) => void;
    onBlur: (event: react.FocusEvent<T, Element>) => void;
};

declare const useFormErrorStyles: () => Record<string, SystemStyleObject>;

interface FormErrorMessageProps extends HTMLChakraProps<"div">, ThemingProps<"FormErrorMessage"> {
}
/**
 * Used to provide feedback about an invalid input,
 * and suggest clear instructions on how to fix it.
 */
declare const FormErrorMessage: _chakra_ui_system.ComponentWithAs<"div", FormErrorMessageProps>;
/**
 * Used as the visual indicator that a field is invalid or
 * a field has incorrect values.
 */
declare const FormErrorIcon: _chakra_ui_system.ComponentWithAs<"svg", IconProps>;

interface FormLabelProps extends HTMLChakraProps<"label">, ThemingProps<"FormLabel"> {
    /**
     * @type React.ReactElement
     */
    requiredIndicator?: React.ReactElement;
    /**
     * @type React.ReactNode
     */
    optionalIndicator?: React.ReactNode;
}
/**
 * Used to enhance the usability of form controls.
 *
 * It is used to inform users as to what information
 * is requested for a form field.
 *
 * ♿️ Accessibility: Every form field should have a form label.
 */
declare const FormLabel: _chakra_ui_system.ComponentWithAs<"label", FormLabelProps>;
interface RequiredIndicatorProps extends HTMLChakraProps<"span"> {
}
/**
 * Used to show a "required" text or an asterisks (*) to indicate that
 * a field is required.
 */
declare const RequiredIndicator: _chakra_ui_system.ComponentWithAs<"span", RequiredIndicatorProps>;

export { FormControl, FormControlOptions, FormControlProps, FormErrorIcon, FormErrorMessage, FormErrorMessageProps, FormHelperText, FormLabel, FormLabelProps, HelpTextProps, RequiredIndicator, RequiredIndicatorProps, UseFormControlProps, useFormControl, useFormControlContext, useFormControlProps, useFormControlStyles, useFormErrorStyles };
