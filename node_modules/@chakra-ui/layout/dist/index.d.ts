import * as _chakra_ui_system from '@chakra-ui/system';
import { HTMLChakraProps, ResponsiveValue, ThemingProps, SystemProps, SystemStyleObject, ChakraComponent } from '@chakra-ui/system';
import { IconProps } from '@chakra-ui/icon';

interface AspectRatioOptions {
    /**
     * The aspect ratio of the Box. Common values are:
     *
     * `21/9`, `16/9`, `9/16`, `4/3`, `1.85/1`
     */
    ratio?: ResponsiveValue<number>;
}
interface AspectRatioProps extends HTMLChakraProps<"div">, AspectRatioOptions {
}
/**
 * React component used to cropping media (videos, images and maps)
 * to a desired aspect ratio.
 *
 * @see Docs https://chakra-ui.com/aspectratiobox
 */
declare const AspectRatio: _chakra_ui_system.ComponentWithAs<"div", AspectRatioProps>;

interface BadgeProps extends HTMLChakraProps<"span">, ThemingProps<"Badge"> {
}
/**
 * React component used to display notifications, messages, or
 * statuses in different shapes and sizes.
 *
 * @see Docs https://chakra-ui.com/badge
 */
declare const Badge: _chakra_ui_system.ComponentWithAs<"span", BadgeProps>;

interface BoxProps extends HTMLChakraProps<"div"> {
}
/**
 * Box is the most abstract component on top of which other chakra
 * components are built. It renders a `div` element by default.
 *
 * @see Docs https://chakra-ui.com/box
 */
declare const Box: _chakra_ui_system.ChakraComponent<"div", {}>;
/**
 * As a constraint, you can't pass size related props
 * Only `size` would be allowed
 */
declare type Omitted = "size" | "boxSize" | "width" | "height" | "w" | "h";
interface SquareProps extends Omit<BoxProps, Omitted> {
    /**
     * The size (width and height) of the square
     */
    size?: BoxProps["width"];
    /**
     * If `true`, the content will be centered in the square
     */
    centerContent?: boolean;
}
declare const Square: _chakra_ui_system.ComponentWithAs<"div", SquareProps>;
declare const Circle: _chakra_ui_system.ComponentWithAs<"div", SquareProps>;

interface CenterProps extends HTMLChakraProps<"div"> {
}
/**
 * React component used to horizontally and vertically center its child.
 * It uses the popular `display: flex` centering technique.
 *
 * @see Docs https://chakra-ui.com/center
 */
declare const Center: _chakra_ui_system.ChakraComponent<"div", {}>;
interface AbsoluteCenterProps extends HTMLChakraProps<"div"> {
    axis?: "horizontal" | "vertical" | "both";
}
/**
 * React component used to horizontally and vertically center an element
 * relative to its parent dimensions.
 *
 * It uses the `position: absolute` strategy.
 *
 * @see Docs https://chakra-ui.com/center
 * @see WebDev https://web.dev/centering-in-css/#5.-pop-and-plop
 */
declare const AbsoluteCenter: _chakra_ui_system.ComponentWithAs<"div", AbsoluteCenterProps>;

interface CodeProps extends HTMLChakraProps<"code">, ThemingProps<"Code"> {
}
/**
 * React component to render inline code snippets.
 *
 * @see Docs https://chakra-ui.com/code
 */
declare const Code: _chakra_ui_system.ComponentWithAs<"code", CodeProps>;

interface ContainerProps extends HTMLChakraProps<"div">, ThemingProps<"Container"> {
    /**
     * If `true`, container will center its children
     * regardless of their width.
     */
    centerContent?: boolean;
}
/**
 * Layout component used to wrap app or website content
 *
 * It sets `margin-left` and `margin-right` to `auto`,
 * to keep its content centered.
 *
 * It also sets a default max-width of `60ch` (60 characters).
 *
 * @see Docs https://chakra-ui.com/docs/components/container
 */
declare const Container: _chakra_ui_system.ComponentWithAs<"div", ContainerProps>;

/**
 * Layout component used to visually separate content in a list or group.
 * It displays a thin horizontal or vertical line, and renders a `hr` tag.
 *
 * @see Docs https://chakra-ui.com/divider
 */
declare const Divider: _chakra_ui_system.ComponentWithAs<"hr", DividerProps>;
interface DividerProps extends HTMLChakraProps<"div">, ThemingProps<"Divider"> {
    orientation?: "horizontal" | "vertical";
}

interface FlexOptions {
    /**
     * Shorthand for `alignItems` style prop
     * @type SystemProps["alignItems"]
     */
    align?: SystemProps["alignItems"];
    /**
     * Shorthand for `justifyContent` style prop
     * @type SystemProps["justifyContent"]
     */
    justify?: SystemProps["justifyContent"];
    /**
     * Shorthand for `flexWrap` style prop
     * @type SystemProps["flexWrap"]
     */
    wrap?: SystemProps["flexWrap"];
    /**
     * Shorthand for `flexDirection` style prop
     * @type SystemProps["flexDirection"]
     */
    direction?: SystemProps["flexDirection"];
    /**
     * Shorthand for `flexBasis` style prop
     * @type SystemProps["flexBasis"]
     */
    basis?: SystemProps["flexBasis"];
    /**
     * Shorthand for `flexGrow` style prop
     * @type SystemProps["flexGrow"]
     */
    grow?: SystemProps["flexGrow"];
    /**
     * Shorthand for `flexShrink` style prop
     * @type SystemProps["flexShrink"]
     */
    shrink?: SystemProps["flexShrink"];
}
interface FlexProps extends HTMLChakraProps<"div">, FlexOptions {
}
/**
 * React component used to create flexbox layouts.
 *
 * It renders a `div` with `display: flex` and
 * comes with helpful style shorthand.
 *
 * @see Docs https://chakra-ui.com/flex
 */
declare const Flex: _chakra_ui_system.ComponentWithAs<"div", FlexProps>;

interface GridOptions {
    /**
     * Shorthand prop for `gridTemplateColumns`
     * @type SystemProps["gridTemplateColumns"]
     */
    templateColumns?: SystemProps["gridTemplateColumns"];
    /**
     * Shorthand prop for `gridGap`
     * @type SystemProps["gridGap"]
     */
    gap?: SystemProps["gridGap"];
    /**
     * Shorthand prop for `gridRowGap`
     * @type SystemProps["gridRowGap"]
     */
    rowGap?: SystemProps["gridRowGap"];
    /**
     * Shorthand prop for `gridColumnGap`
     * @type SystemProps["gridColumnGap"]
     */
    columnGap?: SystemProps["gridColumnGap"];
    /**
     * Shorthand prop for `gridAutoFlow`
     * @type SystemProps["gridAutoFlow"]
     */
    autoFlow?: SystemProps["gridAutoFlow"];
    /**
     * Shorthand prop for `gridAutoRows`
     * @type SystemProps["gridAutoRows"]
     */
    autoRows?: SystemProps["gridAutoRows"];
    /**
     * Shorthand prop for `gridAutoColumns`
     * @type SystemProps["gridAutoColumns"]
     */
    autoColumns?: SystemProps["gridAutoColumns"];
    /**
     * Shorthand prop for `gridTemplateRows`
     * @type SystemProps["gridTemplateRows"]
     */
    templateRows?: SystemProps["gridTemplateRows"];
    /**
     * Shorthand prop for `gridTemplateAreas`
     * @type SystemProps["gridTemplateAreas"]
     */
    templateAreas?: SystemProps["gridTemplateAreas"];
    /**
     * Shorthand prop for `gridColumn`
     * @type SystemProps["gridColumn"]
     */
    column?: SystemProps["gridColumn"];
    /**
     * Shorthand prop for `gridRow`
     * @type SystemProps["gridRow"]
     */
    row?: SystemProps["gridRow"];
}
interface GridProps extends Omit<HTMLChakraProps<"div">, keyof GridOptions>, GridOptions {
}
/**
 * React component used to create grid layouts.
 *
 * It renders a `div` with `display: grid` and
 * comes with helpful style shorthand.
 *
 * @see Docs https://chakra-ui.com/grid
 */
declare const Grid: _chakra_ui_system.ComponentWithAs<"div", GridProps>;

interface GridItemProps extends BoxProps {
    /**
     * Shorthand prop for `gridArea`
     * @type SystemProps["gridArea"]
     */
    area?: SystemProps["gridArea"];
    /**
     * The number of columns the grid item should `span`.
     * @type ResponsiveValue<number | "auto">
     */
    colSpan?: ResponsiveValue<number | "auto">;
    /**
     * The column number the grid item should start.
     * @type ResponsiveValue<number | "auto">
     */
    colStart?: ResponsiveValue<number | "auto">;
    /**
     * @type ResponsiveValue<number | "auto">
     */
    colEnd?: ResponsiveValue<number | "auto">;
    /**
     * @type ResponsiveValue<number | "auto">
     */
    rowStart?: ResponsiveValue<number | "auto">;
    /**
     * @type ResponsiveValue<number | "auto">
     */
    rowEnd?: ResponsiveValue<number | "auto">;
    /**
     * @type ResponsiveValue<number | "auto">
     */
    rowSpan?: ResponsiveValue<number | "auto">;
}
declare const GridItem: _chakra_ui_system.ComponentWithAs<"div", GridItemProps>;

interface HeadingProps extends HTMLChakraProps<"h2">, ThemingProps<"Heading"> {
}
/**
 * `Heading` is used to render semantic HTML heading elements.
 *
 * By default, renders as `h2` with themantic size `xl`
 *
 * @see Docs https://chakra-ui.com/docs/components/heading
 */
declare const Heading: _chakra_ui_system.ComponentWithAs<"h2", HeadingProps>;

declare type Chunk = {
    text: string;
    match: boolean;
};
declare type Options$1 = {
    text: string;
    query: string | string[];
};
declare function useHighlight(props: Options$1): Chunk[];
declare type HighlightProps = {
    query: string | string[];
    children: string | ((props: Chunk[]) => React.ReactNode);
    styles?: SystemStyleObject;
};
declare type MarkProps = ThemingProps<"Mark"> & HTMLChakraProps<"mark">;
declare const Mark: _chakra_ui_system.ComponentWithAs<"mark", MarkProps>;
/**
 * `Highlight` allows you to highlight substrings of a text.
 *
 * @see Docs https://chakra-ui.com/docs/components/highlight
 */
declare function Highlight(props: HighlightProps): JSX.Element;

interface KbdProps extends HTMLChakraProps<"kbd">, ThemingProps<"Kbd"> {
}
/**
 * Semantic component to render a keyboard shortcut
 * within an application.
 *
 * @example
 *
 * ```jsx
 * <Kbd>âŒ˜ + T</Kbd>
 * ```
 *
 * @see Docs https://chakra-ui.com/kbd
 */
declare const Kbd: _chakra_ui_system.ComponentWithAs<"kbd", KbdProps>;

interface LinkProps extends HTMLChakraProps<"a">, ThemingProps<"Link"> {
    /**
     *  If `true`, the link will open in new tab
     */
    isExternal?: boolean;
}
/**
 * Links are accessible elements used primarily for navigation.
 *
 * It integrates well with other routing libraries like
 * React Router, Reach Router and Next.js Link.
 *
 * @example
 *
 * ```jsx
 * <Link as={ReactRouterLink} to="/home">Home</Link>
 * ```
 *
 * @see Docs https://chakra-ui.com/link
 */
declare const Link: _chakra_ui_system.ComponentWithAs<"a", LinkProps>;

interface LinkOverlayProps extends HTMLChakraProps<"a"> {
    /**
     *  If `true`, the link will open in new tab
     */
    isExternal?: boolean;
}
declare const LinkOverlay: _chakra_ui_system.ComponentWithAs<"a", LinkOverlayProps>;
interface LinkBoxProps extends HTMLChakraProps<"div"> {
}
/**
 * `LinkBox` is used to wrap content areas within a link while ensuring semantic html
 *
 * @see Docs https://chakra-ui.com/docs/navigation/link-overlay
 * @see Resources https://www.sarasoueidan.com/blog/nested-links
 */
declare const LinkBox: _chakra_ui_system.ComponentWithAs<"div", LinkBoxProps>;

declare const useListStyles: () => Record<string, SystemStyleObject>;

interface ListOptions {
    /**
     * Shorthand prop for `listStyleType`
     * @type SystemProps["listStyleType"]
     */
    styleType?: SystemProps["listStyleType"];
    /**
     * Shorthand prop for `listStylePosition`
     * @type SystemProps["listStylePosition"]
     */
    stylePosition?: SystemProps["listStylePosition"];
    /**
     * The space between each list item
     * @type SystemProps["margin"]
     */
    spacing?: SystemProps["margin"];
}
interface ListProps extends HTMLChakraProps<"ul">, ThemingProps<"List">, ListOptions {
}
/**
 * List is used to display list items, it renders a `<ul>` by default.
 *
 * @see Docs https://chakra-ui.com/list
 */
declare const List: _chakra_ui_system.ComponentWithAs<"ul", ListProps>;
declare const OrderedList: _chakra_ui_system.ComponentWithAs<"ol", ListProps>;
declare const UnorderedList: _chakra_ui_system.ComponentWithAs<"ul", ListProps>;
interface ListItemProps extends HTMLChakraProps<"li"> {
}
/**
 * ListItem
 *
 * Used to render a list item
 */
declare const ListItem: _chakra_ui_system.ComponentWithAs<"li", ListItemProps>;
/**
 * ListIcon
 *
 * Used to render an icon beside the list item text
 */
declare const ListIcon: _chakra_ui_system.ComponentWithAs<"svg", IconProps>;

interface SimpleGridOptions {
    /**
     * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.
     */
    minChildWidth?: GridProps["minWidth"];
    /**
     * The number of columns
     */
    columns?: ResponsiveValue<number>;
    /**
     * The gap between the grid items
     */
    spacing?: GridProps["gridGap"];
    /**
     * The column gap between the grid items
     */
    spacingX?: GridProps["gridGap"];
    /**
     * The row gap between the grid items
     */
    spacingY?: GridProps["gridGap"];
}
interface SimpleGridProps extends GridProps, SimpleGridOptions {
}
/**
 * SimpleGrid
 *
 * React component that uses the `Grid` component and provides
 * a simpler interface to create responsive grid layouts.
 *
 * Provides props that easily define columns and spacing.
 *
 * @see Docs https://chakra-ui.com/simplegrid
 */
declare const SimpleGrid: _chakra_ui_system.ComponentWithAs<"div", SimpleGridProps>;

interface SpacerProps extends HTMLChakraProps<"div"> {
}
/**
 * A flexible flex spacer that expands along the major axis of its containing flex layout.
 * It renders a `div` by default, and takes up any available space.
 *
 * @see Docs https://chakra-ui.com/flex#using-the-spacer
 */
declare const Spacer: _chakra_ui_system.ChakraComponent<"div", {}>;

declare type StackDirection = ResponsiveValue<"row" | "column" | "row-reverse" | "column-reverse">;
/**
 * If we ever run into SSR issues with this, check this post to find a fix for it:
 * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c
 */
declare const selector = "& > *:not(style) ~ *:not(style)";
interface Options {
    spacing: SystemProps["margin"];
    direction: StackDirection;
}
declare function getStackStyles(options: Options): {
    flexDirection: StackDirection;
    "& > *:not(style) ~ *:not(style)": any;
};
declare function getDividerStyles(options: Options): {
    "&": any;
};

interface StackOptions {
    /**
     * Shorthand for `alignItems` style prop
     * @type SystemProps["alignItems"]
     */
    align?: SystemProps["alignItems"];
    /**
     * Shorthand for `justifyContent` style prop
     * @type SystemProps["justifyContent"]
     */
    justify?: SystemProps["justifyContent"];
    /**
     * Shorthand for `flexWrap` style prop
     * @type SystemProps["flexWrap"]
     */
    wrap?: SystemProps["flexWrap"];
    /**
     * The space between each stack item
     * @type SystemProps["margin"]
     */
    spacing?: SystemProps["margin"];
    /**
     * The direction to stack the items.
     */
    direction?: StackDirection;
    /**
     * If `true`, each stack item will show a divider
     * @type React.ReactElement
     */
    divider?: React.ReactElement;
    /**
     * If `true`, the children will be wrapped in a `Box` with
     * `display: inline-block`, and the `Box` will take the spacing props
     */
    shouldWrapChildren?: boolean;
    /**
     * If `true` the items will be stacked horizontally.
     */
    isInline?: boolean;
}
interface StackProps extends HTMLChakraProps<"div">, StackOptions {
}
/**
 * Stacks help you easily create flexible and automatically distributed layouts
 *
 * You can stack elements in the horizontal or vertical direction,
 * and apply a space or/and divider between each element.
 *
 * It uses `display: flex` internally and renders a `div`.
 *
 * @see Docs https://chakra-ui.com/stack
 *
 */
declare const Stack: _chakra_ui_system.ComponentWithAs<"div", StackProps>;

/**
 * A view that arranges its children in a horizontal line.
 *
 * @see Docs https://chakra-ui.com/docs/components/stack
 */
declare const HStack: _chakra_ui_system.ComponentWithAs<"div", StackProps>;

interface StackDividerProps extends HTMLChakraProps<"div"> {
}
declare const StackDivider: ChakraComponent<"div">;

declare const StackItem: ChakraComponent<"div">;

/**
 * A view that arranges its children in a vertical line.
 *
 * @see Docs https://chakra-ui.com/docs/components/stack
 */
declare const VStack: _chakra_ui_system.ComponentWithAs<"div", StackProps>;

interface TextProps extends HTMLChakraProps<"p">, ThemingProps<"Text"> {
    /**
     * The CSS `text-align` property
     * @type SystemProps["textAlign"]
     */
    align?: SystemProps["textAlign"];
    /**
     * The CSS `text-decoration` property
     * @type SystemProps["textDecoration"]
     */
    decoration?: SystemProps["textDecoration"];
    /**
     * The CSS `text-transform` property
     * @type SystemProps["textTransform"]
     */
    casing?: SystemProps["textTransform"];
}
/**
 * Used to render texts or paragraphs.
 *
 * @see Docs https://chakra-ui.com/text
 */
declare const Text: _chakra_ui_system.ComponentWithAs<"p", TextProps>;

interface WrapProps extends HTMLChakraProps<"div"> {
    /**
     * The space between each child (even if it wraps)
     * @type SystemProps["margin"]
     */
    spacing?: SystemProps["margin"];
    /**
     * The horizontal space between the each child (even if it wraps). Defaults to `spacing` if not defined.
     * @type SystemProps["margin"]
     */
    spacingX?: SystemProps["margin"];
    /**
     * The vertical space between the each child (even if it wraps). Defaults to `spacing` if not defined.
     * @type SystemProps["margin"]
     */
    spacingY?: SystemProps["margin"];
    /**
     * The `justify-content` value (for cross-axis alignment)
     * @type SystemProps["justifyContent"]
     */
    justify?: SystemProps["justifyContent"];
    /**
     * The `align-items` value (for main axis alignment)
     * @type SystemProps["alignItems"]
     */
    align?: SystemProps["alignItems"];
    /**
     * The `flex-direction` value
     * @type SystemProps["flexDirection"]
     */
    direction?: SystemProps["flexDirection"];
    /**
     * If `true`, the children will be wrapped in a `WrapItem`
     */
    shouldWrapChildren?: boolean;
}
/**
 * Layout component used to stack elements that differ in length
 * and are liable to wrap.
 *
 * Common use cases:
 * - Buttons that appear together at the end of forms
 * - Lists of tags and chips
 *
 * @see Docs https://chakra-ui.com/wrap
 */
declare const Wrap: _chakra_ui_system.ComponentWithAs<"div", WrapProps>;
interface WrapItemProps extends HTMLChakraProps<"li"> {
}
declare const WrapItem: _chakra_ui_system.ComponentWithAs<"li", WrapItemProps>;

export { AbsoluteCenter, AbsoluteCenterProps, AspectRatio, AspectRatioProps, Badge, BadgeProps, Box, BoxProps, Center, CenterProps, Circle, Code, CodeProps, Container, ContainerProps, Divider, DividerProps, Flex, FlexOptions, FlexProps, Grid, GridItem, GridItemProps, GridOptions, GridProps, HStack, Heading, HeadingProps, Highlight, HighlightProps, Kbd, KbdProps, Link, LinkBox, LinkBoxProps, LinkOverlay, LinkOverlayProps, LinkProps, List, ListIcon, ListItem, ListItemProps, ListProps, Mark, MarkProps, OrderedList, SimpleGrid, SimpleGridProps, Spacer, SpacerProps, Square, SquareProps, Stack, StackDirection, StackDivider, StackDividerProps, StackItem, StackProps, Text, TextProps, UnorderedList, VStack, Wrap, WrapItem, WrapItemProps, WrapProps, getDividerStyles, getStackStyles, selector, useHighlight, useListStyles };
