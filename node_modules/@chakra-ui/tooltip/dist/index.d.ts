import * as _chakra_ui_system from '@chakra-ui/system';
import { HTMLChakraProps, ThemingProps } from '@chakra-ui/system';
import { PortalProps } from '@chakra-ui/portal';
import { HTMLMotionProps } from 'framer-motion';
import * as _chakra_ui_react_types from '@chakra-ui/react-types';
import { PropGetter } from '@chakra-ui/react-types';
import { UsePopperProps } from '@chakra-ui/popper';

interface UseTooltipProps extends Pick<UsePopperProps, "modifiers" | "gutter" | "offset" | "arrowPadding" | "direction" | "placement"> {
    /**
     * Delay (in ms) before showing the tooltip
     * @default 0ms
     */
    openDelay?: number;
    /**
     * Delay (in ms) before hiding the tooltip
     * @default 0ms
     */
    closeDelay?: number;
    /**
     * If `true`, the tooltip will hide on click
     * @default true
     */
    closeOnClick?: boolean;
    /**
     * If `true`, the tooltip will hide while the mouse is down
     * @deprecated - use `closeOnPointerDown` instead
     */
    closeOnMouseDown?: boolean;
    /**
     * If `true`, the tooltip will hide while the pointer is down
     */
    closeOnPointerDown?: boolean;
    /**
     * If `true`, the tooltip will hide on pressing Esc key
     * @default true
     */
    closeOnEsc?: boolean;
    /**
     * Callback to run when the tooltip shows
     */
    onOpen?(): void;
    /**
     * Callback to run when the tooltip hides
     */
    onClose?(): void;
    /**
     * Custom `id` to use in place of `uuid`
     */
    id?: string;
    /**
     * If `true`, the tooltip will be shown (in controlled mode)
     */
    isOpen?: boolean;
    /**
     * If `true`, the tooltip will be initially shown
     */
    defaultIsOpen?: boolean;
    isDisabled?: boolean;
    closeOnScroll?: boolean;
    /**
     * @default 10
     */
    arrowSize?: number;
    arrowShadowColor?: string;
}
declare function useTooltip(props?: UseTooltipProps): {
    isOpen: boolean;
    show: () => void;
    hide: () => void;
    getTriggerProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getTooltipProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getTooltipPositionerProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getArrowProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getArrowInnerProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
};
declare type UseTooltipReturn = ReturnType<typeof useTooltip>;

interface TooltipProps extends HTMLChakraProps<"div">, ThemingProps<"Tooltip">, UseTooltipProps {
    /**
     * The React component to use as the
     * trigger for the tooltip
     */
    children: React.ReactNode;
    /**
     * The label of the tooltip
     */
    label?: React.ReactNode;
    /**
     * The accessible, human friendly label to use for
     * screen readers.
     *
     * If passed, tooltip will show the content `label`
     * but expose only `aria-label` to assistive technologies
     */
    "aria-label"?: string;
    /**
     * If `true`, the tooltip will wrap its children
     * in a `<span/>` with `tabIndex=0`
     */
    shouldWrapChildren?: boolean;
    /**
     * If `true`, the tooltip will show an arrow tip
     */
    hasArrow?: boolean;
    /**
     * Props to be forwarded to the portal component
     */
    portalProps?: Pick<PortalProps, "appendToParentPortal" | "containerRef">;
    motionProps?: HTMLMotionProps<"div">;
}
/**
 * Tooltips display informative text when users hover, focus on, or tap an element.
 *
 * @see Docs     https://chakra-ui.com/docs/overlay/tooltip
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/tooltip/
 */
declare const Tooltip: _chakra_ui_system.ComponentWithAs<"div", TooltipProps>;

export { Tooltip, TooltipProps, UseTooltipProps, UseTooltipReturn, useTooltip };
