import { AlertProps, AlertStatus } from '@chakra-ui/alert';
import { SystemStyleObject, ThemingProps, StyleProps, useChakra, ColorMode } from '@chakra-ui/system';
import * as react from 'react';
import { Variants } from 'framer-motion';
import { PortalProps } from '@chakra-ui/portal';

declare type LogicalToastPosition = "top-start" | "top-end" | "bottom-start" | "bottom-end";
declare type ToastPositionWithLogical = LogicalToastPosition | "top" | "top-left" | "top-right" | "bottom" | "bottom-left" | "bottom-right";
declare type ToastPosition = Exclude<ToastPositionWithLogical, LogicalToastPosition>;
declare function getToastPlacement(position: ToastPosition | undefined, dir: "ltr" | "rtl"): ToastPosition | undefined;

interface RenderProps extends UseToastOptions {
    /**
     * Function to close the toast
     */
    onClose(): void;
}
declare type ToastMessage = (props: RenderProps) => React.ReactNode;
declare type ToastId = string | number;
interface ToastOptions {
    /**
     * The element or component type to render.
     * The component will be passed `id` and `onClose`
     */
    message: ToastMessage;
    /**
     * The toast's id
     */
    id: ToastId;
    /**
     * The duration of the toast
     */
    duration: number | null;
    /**
     * The status of the toast's alert component.
     */
    status: Status;
    /**
     * Function that removes the toast from manager's state.
     */
    onRequestRemove(): void;
    /**
     * The position of the toast
     */
    position: ToastPosition;
    /**
     * Callback function to run side effects after the toast has closed.
     */
    onCloseComplete?(): void;
    /**
     * Internally used to queue closing a toast. Should probably not be used by
     * anyone else, but documented regardless.
     */
    requestClose?: boolean;
    /**
     * Optional style overrides for the toast component.
     */
    containerStyle?: SystemStyleObject;
}
declare type ToastState = {
    [K in ToastPosition]: ToastOptions[];
};
declare type Status = "default" | "success" | "error" | "warning" | "info" | "loading";
declare type UpdateFn = (state: ToastState) => void;
declare type CloseAllToastsOptions = {
    positions?: ToastPosition[];
};

interface ToastProps extends UseToastOptions, Omit<AlertProps, keyof UseToastOptions> {
    onClose?: () => void;
}
/**
 * The `Toast` component is used to give feedback to users after an action has taken place.
 *
 * @see Docs https://chakra-ui.com/docs/components/toast
 */
declare const Toast: React.FC<ToastProps>;
declare function createRenderToast(options?: UseToastOptions & {
    toastComponent?: React.FC<ToastProps>;
}): react.FC<RenderProps>;
declare type UseToastPromiseOption = Omit<UseToastOptions, "status">;
declare function createToastFn(dir: "ltr" | "rtl", defaultOptions?: UseToastOptions): {
    (options?: UseToastOptions): ToastId;
    update(id: ToastId, options: Omit<UseToastOptions, "id">): void;
    promise<Result extends unknown, Err extends Error = Error>(promise: Promise<Result>, options: {
        success: MaybeFunction<UseToastPromiseOption, [Result]>;
        error: MaybeFunction<UseToastPromiseOption, [Err]>;
        loading: UseToastPromiseOption;
    }): void;
    closeAll: (options?: CloseAllToastsOptions | undefined) => void;
    close: (id: ToastId) => void;
    isActive: (id: ToastId) => boolean;
};
declare type CreateToastFnReturn = ReturnType<typeof createToastFn>;
declare type MaybeFunction<T, Args extends unknown[] = []> = T | ((...args: Args) => T);

interface UseToastOptions extends ThemingProps<"Alert"> {
    /**
     * The placement of the toast
     *
     * @default "bottom"
     */
    position?: ToastPosition;
    /**
     * The delay before the toast hides (in milliseconds)
     * If set to `null`, toast will never dismiss.
     *
     * @default 5000 ( = 5000ms )
     */
    duration?: ToastOptions["duration"];
    /**
     * Render a component toast component.
     * Any component passed will receive 2 props: `id` and `onClose`.
     */
    render?(props: RenderProps): React.ReactNode;
    /**
     * The title of the toast
     */
    title?: React.ReactNode;
    /**
     * The description of the toast
     */
    description?: React.ReactNode;
    /**
     * If `true`, toast will show a close button
     */
    isClosable?: boolean;
    /**
     * The status of the toast.
     */
    status?: AlertStatus;
    /**
     * A custom icon that will be displayed by the toast.
     */
    icon?: React.ReactNode;
    /**
     * The `id` of the toast.
     *
     * Mostly used when you need to prevent duplicate.
     * By default, we generate a unique `id` for each toast
     */
    id?: ToastId;
    /**
     * Callback function to run side effects after the toast has closed.
     */
    onCloseComplete?: () => void;
    /**
     * Optional style overrides for the container wrapping the toast component.
     */
    containerStyle?: StyleProps;
}
/**
 * React hook used to create a function that can be used
 * to show toasts in an application.
 */
declare function useToast(defaultOptions?: UseToastOptions): CreateToastFnReturn;

interface ToastComponentProps extends ToastOptions, Pick<ToastProviderProps, "motionVariants" | "toastSpacing"> {
}

interface ToastMethods {
    /**
     * Function to actually create a toast and add it
     * to state at the specified position
     */
    notify: (message: ToastMessage, options?: CreateToastOptions) => ToastId;
    /**
     * Close all toasts at once.
     * If given positions, will only close those.
     */
    closeAll: (options?: CloseAllToastsOptions) => void;
    /**
     * Requests to close a toast based on its id and position
     */
    close: (id: ToastId) => void;
    /**
     * Update a specific toast with new options based on the
     * passed `id`
     */
    update: (id: ToastId, options: Omit<UseToastOptions, "id">) => void;
    isActive: (id: ToastId) => boolean;
}
declare type CreateToastOptions = Partial<Pick<ToastOptions, "status" | "duration" | "position" | "id" | "onCloseComplete" | "containerStyle">>;
declare type ToastProviderProps = React.PropsWithChildren<{
    /**
     * Default options for `useToast(options)`
     *
     * @example
     * <ToastProvider defaultOptions={{ duration: 10_000, isClosable: true }} />
     */
    defaultOptions?: UseToastOptions;
    /**
     * Customize the default motion config to animate the toasts your way
     *
     * @example
     * const motionVariants =
     * <ToastProvider motionVariants={motionVariants} />
     */
    motionVariants?: Variants;
    /**
     * Are you looking for a way to style the toast? Use a custom `Alert` variant in the theme.
     * This property overrides the default ToastComponent with your own implementation.
     *
     * @example
     * const CustomToastComponent = (props: ToastComponentProps) => ...
     * <ToastProvider component={CustomToastComponent} />
     *
     * @default ToastComponent
     */
    component?: React.FC<ToastComponentProps>;
    /**
     * Define the margin between toasts
     *
     * @default 0.5rem
     */
    toastSpacing?: string | number;
    /**
     * Props to be forwarded to the portal component
     */
    portalProps?: Pick<PortalProps, "appendToParentPortal" | "containerRef">;
}>;
/**
 * Manages the creation, and removal of toasts
 * across all corners ("top", "bottom", etc.)
 */
declare const ToastProvider: (props: ToastProviderProps) => JSX.Element;

interface CreateStandAloneToastParam extends Partial<ReturnType<typeof useChakra> & {
    setColorMode: (value: ColorMode) => void;
    defaultOptions: UseToastOptions;
}>, Omit<ToastProviderProps, "children"> {
}
declare const defaultStandaloneParam: CreateStandAloneToastParam & Required<Omit<CreateStandAloneToastParam, keyof ToastProviderProps>>;
declare type CreateStandaloneToastReturn = {
    ToastContainer: () => JSX.Element;
    toast: CreateToastFnReturn;
};
/**
 * Create a toast
 */
declare function createStandaloneToast({ theme, colorMode, toggleColorMode, setColorMode, defaultOptions, motionVariants, toastSpacing, component, forced, }?: CreateStandAloneToastParam): CreateStandaloneToastReturn;

export { CloseAllToastsOptions, CreateStandAloneToastParam, CreateStandaloneToastReturn, CreateToastFnReturn, CreateToastOptions, LogicalToastPosition, RenderProps, Status, Toast, ToastId, ToastMessage, ToastMethods, ToastOptions, ToastPosition, ToastPositionWithLogical, ToastProps, ToastProvider, ToastProviderProps, ToastState, UpdateFn, UseToastOptions, createRenderToast, createStandaloneToast, createToastFn, defaultStandaloneParam, getToastPlacement, useToast };
