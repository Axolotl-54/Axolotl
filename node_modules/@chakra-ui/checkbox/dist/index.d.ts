import * as _chakra_ui_system from '@chakra-ui/system';
import { ThemingProps, SystemProps, PropsOf, chakra, HTMLChakraProps } from '@chakra-ui/system';
import * as react from 'react';
import * as _chakra_ui_react_types from '@chakra-ui/react-types';
import { PropGetter } from '@chakra-ui/react-types';

/**
 * React hook that provides all the state management logic
 * for a group of checkboxes.
 *
 * It is consumed by the `CheckboxGroup` component
 *
 * @see Docs https://chakra-ui.com/docs/hooks/use-checkbox-group
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/
 */
declare function useCheckboxGroup(props?: UseCheckboxGroupProps): {
    value: (string | number)[];
    isDisabled: boolean | undefined;
    onChange: (eventOrValue: EventOrValue) => void;
    setValue: react.Dispatch<react.SetStateAction<(string | number)[]>>;
    getCheckboxProps: (props?: Record<string, any>) => {
        [x: string]: any;
        onChange: (eventOrValue: EventOrValue) => void;
    };
};
declare type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>;

interface UseCheckboxGroupProps {
    /**
     * The value of the checkbox group
     */
    value?: Array<string | number>;
    /**
     * The initial value of the checkbox group
     */
    defaultValue?: Array<string | number>;
    /**
     * The callback fired when any children Checkbox is checked or unchecked
     */
    onChange?(value: Array<string | number>): void;
    /**
     * If `true`, all wrapped checkbox inputs will be disabled
     */
    isDisabled?: boolean;
    /**
     * If `true`, input elements will receive
     * `checked` attribute instead of `isChecked`.
     *
     * This assumes, you're using native radio inputs
     */
    isNative?: boolean;
}
declare type EventOrValue = React.ChangeEvent<HTMLInputElement> | string | number;
interface UseCheckboxProps {
    /**
     * If `true`, the checkbox will be checked.
     * You'll need to pass `onChange` to update its value (since it is now controlled)
     */
    isChecked?: boolean;
    /**
     * If `true`, the checkbox will be indeterminate.
     * This only affects the icon shown inside checkbox
     * and does not modify the isChecked property.
     */
    isIndeterminate?: boolean;
    /**
     * If `true`, the checkbox will be disabled
     */
    isDisabled?: boolean;
    /**
     * If `true` and `isDisabled` is passed, the checkbox will
     * remain tabbable but not interactive
     */
    isFocusable?: boolean;
    /**
     * If `true`, the checkbox will be readonly
     */
    isReadOnly?: boolean;
    /**
     * If `true`, the checkbox is marked as invalid.
     * Changes style of unchecked state.
     */
    isInvalid?: boolean;
    /**
     * If `true`, the checkbox input is marked as required,
     * and `required` attribute will be added
     */
    isRequired?: boolean;
    /**
     * If `true`, the checkbox will be initially checked.
     */
    defaultChecked?: boolean;
    /**
     * The callback invoked when the checked state of the `Checkbox` changes.
     */
    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    /**
     * The callback invoked when the checkbox is blurred (loses focus)
     */
    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;
    /**
     * The callback invoked when the checkbox is focused
     */
    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;
    /**
     * The name of the input field in a checkbox
     * (Useful for form submission).
     */
    name?: string;
    /**
     * The value to be used in the checkbox input.
     * This is the value that will be returned on form submission.
     */
    value?: string | number;
    /**
     * id assigned to input
     */
    id?: string;
    /**
     * Defines the string that labels the checkbox element.
     */
    "aria-label"?: string;
    /**
     * Refers to the `id` of the element that labels the checkbox element.
     */
    "aria-labelledby"?: string;
    "aria-invalid"?: true | undefined;
    "aria-describedby"?: string;
    /**
     * The tab-index property of the underlying input element.
     */
    tabIndex?: number;
}
declare type CheckboxOptions = {
    /**
     * The spacing between the checkbox and its label text
     * @default 0.5rem
     * @type SystemProps["marginLeft"]
     */
    spacing?: SystemProps["marginLeft"];
    /**
     * The color of the checkbox icon when checked or indeterminate
     */
    iconColor?: string;
    /**
     * The size of the checkbox icon when checked or indeterminate
     */
    iconSize?: string | number;
    /**
     * The checked icon to use
     *
     * @type React.ReactElement
     * @default CheckboxIcon
     */
    icon?: React.ReactElement;
    /**
     * Additional props to be forwarded to the `input` element
     */
    inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
};
interface CheckboxGroupContext extends Pick<UseCheckboxGroupReturn, "onChange" | "value" | "isDisabled">, Omit<ThemingProps<"Checkbox">, "orientation"> {
}
interface CheckboxState {
    isInvalid?: boolean;
    isFocused: boolean;
    isChecked: boolean;
    isActive: boolean;
    isHovered: boolean;
    isIndeterminate?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    isRequired?: boolean;
}

interface CheckboxGroupProps extends UseCheckboxGroupProps, Omit<ThemingProps<"Checkbox">, "orientation"> {
    children?: React.ReactNode;
}
/**
 * Used for multiple checkboxes which are bound in one group,
 * and it indicates whether one or more options are selected.
 *
 * @see Docs https://chakra-ui.com/checkbox
 */
declare function CheckboxGroup(props: CheckboxGroupProps): JSX.Element;
declare namespace CheckboxGroup {
    var displayName: string;
}

interface CheckboxIconProps extends PropsOf<typeof chakra.svg> {
    isIndeterminate?: boolean;
    isChecked?: boolean;
}
/**
 * CheckboxIcon is used to visually indicate the checked or indeterminate
 * state of a checkbox.
 *
 * @todo allow users pass their own icon svgs
 */
declare function CheckboxIcon(props: CheckboxIconProps): JSX.Element | null;

declare type CheckboxControlProps = Omit<HTMLChakraProps<"div">, keyof UseCheckboxProps>;
declare type BaseInputProps = Pick<PropsOf<"input">, "onBlur" | "checked" | "defaultChecked">;
interface CheckboxProps extends CheckboxControlProps, BaseInputProps, ThemingProps<"Checkbox">, UseCheckboxProps, CheckboxOptions {
}
/**
 * Checkbox
 *
 * React component used in forms when a user needs to select
 * multiple values from several options.
 *
 * @see Docs https://chakra-ui.com/checkbox
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/
 */
declare const Checkbox: _chakra_ui_system.ComponentWithAs<"input", CheckboxProps>;

/**
 * useCheckbox that provides all the state and focus management logic
 * for a checkbox. It is consumed by the `Checkbox` component
 *
 * @see Docs https://chakra-ui.com/checkbox#hooks
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/
 */
declare function useCheckbox(props?: UseCheckboxProps): {
    state: CheckboxState;
    getRootProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getCheckboxProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getInputProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getLabelProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    htmlProps: Omit<{
        isDisabled?: boolean | undefined;
        isReadOnly?: boolean | undefined;
        isInvalid?: boolean | undefined;
        isRequired?: boolean | undefined;
        onBlur?: ((event: react.FocusEvent<HTMLInputElement, Element>) => void) | undefined;
        onFocus?: ((event: react.FocusEvent<HTMLInputElement, Element>) => void) | undefined;
        id?: string | undefined;
        "aria-describedby"?: string | undefined;
    }, "id" | "aria-describedby" | "onFocus" | "onBlur" | "isDisabled" | "isRequired" | "isInvalid" | "isReadOnly">;
};
declare type UseCheckboxReturn = ReturnType<typeof useCheckbox>;

export { Checkbox, CheckboxGroup, CheckboxGroupContext, CheckboxGroupProps, CheckboxIcon, CheckboxIconProps, CheckboxProps, CheckboxState, UseCheckboxGroupProps, UseCheckboxGroupReturn, UseCheckboxProps, UseCheckboxReturn, useCheckbox, useCheckboxGroup };
