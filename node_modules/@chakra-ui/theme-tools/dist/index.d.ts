export { anatomy } from '@chakra-ui/anatomy';
import { WCAG2Parms } from '@ctrl/tinycolor';
import { StyleFunctionProps, SystemStyleInterpolation, SystemStyleObject } from '@chakra-ui/styled-system';
export { MultiStyleConfig, PartsStyleFunction, PartsStyleInterpolation, PartsStyleObject, StyleConfig, StyleFunctionProps, SystemStyleFunction, SystemStyleInterpolation, SystemStyleObject } from '@chakra-ui/styled-system';

declare type Dict = {
    [key: string]: any;
};
/**
 * Get the color raw value from theme
 * @param theme - the theme object
 * @param color - the color path ("green.200")
 * @param fallback - the fallback color
 *
 * @deprecated This will be removed in the next major release.
 */
declare const getColor: (theme: Dict, color: string, fallback?: string) => any;
/**
 * Determines if the tone of given color is "light" or "dark"
 * @param color - the color in hex, rgb, or hsl
 *
 * @deprecated This will be removed in the next major release.
 */
declare const tone: (color: string) => (theme: Dict) => "dark" | "light";
/**
 * Determines if a color tone is "dark"
 * @param color - the color in hex, rgb, or hsl
 *
 * @deprecated This will be removed in the next major release.
 */
declare const isDark: (color: string) => (theme: Dict) => boolean;
/**
 * Determines if a color tone is "light"
 * @param color - the color in hex, rgb, or hsl
 *
 * @deprecated This will be removed in the next major release.
 */
declare const isLight: (color: string) => (theme: Dict) => boolean;
/**
 * Make a color transparent
 * @param color - the color in hex, rgb, or hsl
 * @param opacity - the amount of opacity the color should have (0-1)
 *
 * @deprecated This will be removed in the next major release.
 */
declare const transparentize: (color: string, opacity: number) => (theme: Dict) => string;
/**
 * Add white to a color
 * @param color - the color in hex, rgb, or hsl
 * @param amount - the amount white to add (0-100)
 *
 * @deprecated This will be removed in the next major release.
 */
declare const whiten: (color: string, amount: number) => (theme: Dict) => string;
/**
 * Add black to a color
 * @param color - the color in hex, rgb, or hsl
 * @param amount - the amount black to add (0-100)
 *
 * @deprecated This will be removed in the next major release.
 */
declare const blacken: (color: string, amount: number) => (theme: Dict) => string;
/**
 * Darken a specified color
 * @param color - the color in hex, rgb, or hsl
 * @param amount - the amount to darken (0-100)
 *
 * @deprecated This will be removed in the next major release.
 */
declare const darken: (color: string, amount: number) => (theme: Dict) => string;
/**
 * Lighten a specified color
 * @param color - the color in hex, rgb, or hsl
 * @param amount - the amount to lighten (0-100)
 *
 * @deprecated This will be removed in the next major release.
 */
declare const lighten: (color: string, amount: number) => (theme: Dict) => string;
/**
 * Checks the contract ratio of between 2 colors,
 * based on the Web Content Accessibility Guidelines (Version 2.0).
 *
 * @param fg - the foreground or text color
 * @param bg - the background color
 *
 * @deprecated This will be removed in the next major release.
 */
declare const contrast: (fg: string, bg: string) => (theme: Dict) => number;
/**
 * Checks if a color meets the Web Content Accessibility
 * Guidelines (Version 2.0) for contrast ratio.
 *
 * @param textColor - the foreground or text color
 * @param bgColor - the background color
 * @param options
 *
 * @deprecated This will be removed in the next major release.
 */
declare const isAccessible: (textColor: string, bgColor: string, options?: WCAG2Parms) => (theme: Dict) => boolean;
/**
 *
 * @deprecated This will be removed in the next major release.
 */
declare const complementary: (color: string) => (theme: Dict) => string;
declare function generateStripe(size?: string, color?: string): {
    backgroundImage: string;
    backgroundSize: string;
};
interface RandomColorOptions {
    /**
     * If passed, string will be used to generate
     * random color
     */
    string?: string;
    /**
     * List of colors to pick from at random
     */
    colors?: string[];
}
declare function randomColor(opts?: RandomColorOptions): string;

declare type GlobalStyleProps = StyleFunctionProps;
declare type GlobalStyles = {
    global?: SystemStyleInterpolation;
};
declare type JSXElementStyles = {
    [K in keyof JSX.IntrinsicElements]?: SystemStyleObject;
};
declare type Styles = GlobalStyles & JSXElementStyles;
declare function mode<T>(light: T, dark: T): (props: Record<string, any> | StyleFunctionProps) => T;
declare function orient<T>(options: {
    orientation?: "vertical" | "horizontal";
    vertical: T;
    horizontal: T;
}): {};

interface BaseBreakpointConfig {
    sm: string;
    md: string;
    lg: string;
    xl: string;
    "2xl"?: string;
    [key: string]: string | undefined;
}
declare type Breakpoints<T> = T & {
    base: "0em";
};
/**
 * @deprecated will be deprecated pretty soon, simply pass the breakpoints as an object
 */
declare const createBreakpoints: <T extends BaseBreakpointConfig>(config: T) => Breakpoints<T>;

declare function isDecimal(value: any): boolean;
declare function addPrefix(value: string, prefix?: string): string;
declare function toVarRef(name: string, fallback?: string): string;
declare function toVar(value: string, prefix?: string): string;
declare type CSSVar = {
    variable: string;
    reference: string;
};
declare type CSSVarOptions = {
    fallback?: string | CSSVar;
    prefix?: string;
};
declare function cssVar(name: string, options?: CSSVarOptions): {
    variable: string;
    reference: string;
};

declare type Operand = string | number | CSSVar;
declare type Operands = Operand[];
interface CalcChain {
    add: (...operands: Operands) => CalcChain;
    subtract: (...operands: Operands) => CalcChain;
    multiply: (...operands: Operands) => CalcChain;
    divide: (...operands: Operands) => CalcChain;
    negate: () => CalcChain;
    toString: () => string;
}
declare const calc: ((x: Operand) => CalcChain) & {
    add: (...operands: Operands) => string;
    subtract: (...operands: Operands) => string;
    multiply: (...operands: Operands) => string;
    divide: (...operands: Operands) => string;
    negate: (x: Operand) => string;
};

export { BaseBreakpointConfig, Breakpoints, CSSVar, CSSVarOptions, CalcChain, GlobalStyleProps, GlobalStyles, JSXElementStyles, Operand, Styles, addPrefix, blacken, calc, complementary, contrast, createBreakpoints, cssVar, darken, generateStripe, getColor, isAccessible, isDark, isDecimal, isLight, lighten, mode, orient, randomColor, toVar, toVarRef, tone, transparentize, whiten };
