import * as _chakra_ui_system from '@chakra-ui/system';
import { SystemProps, HTMLChakraProps, ThemingProps } from '@chakra-ui/system';

interface ButtonGroupOptions {
    /**
     * If `true`, the borderRadius of button that are direct children will be altered
     * to look flushed together
     */
    isAttached?: boolean;
    /**
     * If `true`, all wrapped button will be disabled
     */
    isDisabled?: boolean;
    /**
     * The spacing between the buttons
     * @default '0.5rem'
     * @type SystemProps["marginRight"]
     */
    spacing?: SystemProps["marginRight"];
}
interface ButtonOptions {
    /**
     * If `true`, the button will show a spinner.
     */
    isLoading?: boolean;
    /**
     * If `true`, the button will be styled in its active state.
     */
    isActive?: boolean;
    /**
     * If `true`, the button will be disabled.
     */
    isDisabled?: boolean;
    /**
     * The label to show in the button when `isLoading` is true
     * If no text is passed, it only shows the spinner
     */
    loadingText?: string;
    /**
     * The html button type to use.
     */
    type?: "button" | "reset" | "submit";
    /**
     * If added, the button will show an icon before the button's label.
     * @type React.ReactElement
     */
    leftIcon?: React.ReactElement;
    /**
     * If added, the button will show an icon after the button's label.
     * @type React.ReactElement
     */
    rightIcon?: React.ReactElement;
    /**
     * The space between the button icon and label.
     * @type SystemProps["marginRight"]
     */
    iconSpacing?: SystemProps["marginRight"];
    /**
     * Replace the spinner component when `isLoading` is set to `true`
     * @type React.ReactElement
     */
    spinner?: React.ReactElement;
    /**
     * It determines the placement of the spinner when isLoading is true
     * @default "start"
     */
    spinnerPlacement?: "start" | "end";
}
interface ButtonSpinnerOptions {
    label?: string;
    /**
     * @type SystemProps["margin"]
     */
    spacing?: SystemProps["margin"];
    placement?: "start" | "end";
}

interface ButtonProps extends HTMLChakraProps<"button">, ButtonOptions, ThemingProps<"Button"> {
}
/**
 * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.
 *
 * @see Docs https://chakra-ui.com/docs/components/button
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/
 */
declare const Button: _chakra_ui_system.ComponentWithAs<"button", ButtonProps>;

interface ButtonGroupProps extends HTMLChakraProps<"div">, ThemingProps<"Button">, ButtonGroupOptions {
}
declare const ButtonGroup: _chakra_ui_system.ComponentWithAs<"div", ButtonGroupProps>;

declare type OmittedProps = "leftIcon" | "rightIcon" | "loadingText" | "iconSpacing" | "spinnerPlacement";
interface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {
}
interface IconButtonProps extends BaseButtonProps {
    /**
     * The icon to be used in the button.
     * @type React.ReactElement
     */
    icon?: React.ReactElement;
    /**
     * If `true`, the button will be perfectly round. Else, it'll be slightly round
     */
    isRound?: boolean;
    /**
     * A11y: A label that describes the button
     */
    "aria-label": string;
}
/**
 * Icon button renders an icon within a button.
 *
 * @see Docs https://chakra-ui.com/docs/components/icon-button
 */
declare const IconButton: _chakra_ui_system.ComponentWithAs<"button", IconButtonProps>;

interface ButtonSpinnerProps extends HTMLChakraProps<"div">, ButtonSpinnerOptions {
}
declare function ButtonSpinner(props: ButtonSpinnerProps): JSX.Element;
declare namespace ButtonSpinner {
    var displayName: string;
}

interface ButtonGroupContext extends ThemingProps<"Button"> {
    isDisabled?: boolean;
}
declare const useButtonGroup: () => ButtonGroupContext;

export { Button, ButtonGroup, ButtonGroupProps, ButtonOptions, ButtonProps, ButtonSpinner, IconButton, IconButtonProps, useButtonGroup };
