"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  DefaultIcon: () => DefaultIcon,
  Select: () => Select,
  SelectField: () => SelectField
});
module.exports = __toCommonJS(src_exports);

// ../../../react-shim.js
var import_react = __toESM(require("react"));

// src/select.tsx
var import_form_control = require("@chakra-ui/form-control");
var import_system2 = require("@chakra-ui/system");

// ../../utilities/shared-utils/src/index.ts
var cx = (...classNames) => classNames.filter(Boolean).join(" ");
var dataAttr = (condition) => condition ? "" : void 0;

// ../../utilities/object-utils/src/index.ts
function split(object, keys) {
  const picked = {};
  const omitted = {};
  for (const [key, value] of Object.entries(object)) {
    if (keys.includes(key))
      picked[key] = value;
    else
      omitted[key] = value;
  }
  return [picked, omitted];
}

// src/select.tsx
var import_react2 = require("react");

// src/select-field.tsx
var import_system = require("@chakra-ui/system");
var SelectField = (0, import_system.forwardRef)(function SelectField2(props, ref) {
  const { children, placeholder, className, ...rest } = props;
  return /* @__PURE__ */ import_react.default.createElement(import_system.chakra.select, {
    ...rest,
    ref,
    className: cx("chakra-select", className)
  }, placeholder && /* @__PURE__ */ import_react.default.createElement("option", {
    value: ""
  }, placeholder), children);
});
SelectField.displayName = "SelectField";

// src/select.tsx
var Select = (0, import_system2.forwardRef)((props, ref) => {
  var _a;
  const styles = (0, import_system2.useMultiStyleConfig)("Select", props);
  const {
    rootProps,
    placeholder,
    icon,
    color,
    height,
    h,
    minH,
    minHeight,
    iconColor,
    iconSize,
    ...rest
  } = (0, import_system2.omitThemingProps)(props);
  const [layoutProps, otherProps] = split(rest, import_system2.layoutPropNames);
  const ownProps = (0, import_form_control.useFormControl)(otherProps);
  const rootStyles = {
    width: "100%",
    height: "fit-content",
    position: "relative",
    color
  };
  const fieldStyles = {
    paddingEnd: "2rem",
    ...styles.field,
    _focus: {
      zIndex: "unset",
      ...(_a = styles.field) == null ? void 0 : _a["_focus"]
    }
  };
  return /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.div, {
    className: "chakra-select__wrapper",
    __css: rootStyles,
    ...layoutProps,
    ...rootProps
  }, /* @__PURE__ */ import_react.default.createElement(SelectField, {
    ref,
    height: h ?? height,
    minH: minH ?? minHeight,
    placeholder,
    ...ownProps,
    __css: fieldStyles
  }, props.children), /* @__PURE__ */ import_react.default.createElement(SelectIcon, {
    "data-disabled": dataAttr(ownProps.disabled),
    ...(iconColor || color) && { color: iconColor || color },
    __css: styles.icon,
    ...iconSize && { fontSize: iconSize }
  }, icon));
});
Select.displayName = "Select";
var DefaultIcon = (props) => /* @__PURE__ */ import_react.default.createElement("svg", {
  viewBox: "0 0 24 24",
  ...props
}, /* @__PURE__ */ import_react.default.createElement("path", {
  fill: "currentColor",
  d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
}));
var IconWrapper = (0, import_system2.chakra)("div", {
  baseStyle: {
    position: "absolute",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    pointerEvents: "none",
    top: "50%",
    transform: "translateY(-50%)"
  }
});
var SelectIcon = (props) => {
  const { children = /* @__PURE__ */ import_react.default.createElement(DefaultIcon, null), ...rest } = props;
  const clone = (0, import_react2.cloneElement)(children, {
    role: "presentation",
    className: "chakra-select__icon",
    focusable: false,
    "aria-hidden": true,
    style: {
      width: "1em",
      height: "1em",
      color: "currentColor"
    }
  });
  return /* @__PURE__ */ import_react.default.createElement(IconWrapper, {
    ...rest,
    className: "chakra-select__icon-wrapper"
  }, (0, import_react2.isValidElement)(children) ? clone : null);
};
SelectIcon.displayName = "SelectIcon";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DefaultIcon,
  Select,
  SelectField
});
