import * as _chakra_ui_react_types from '@chakra-ui/react-types';
import { PropGetter, DOMAttributes, MaybeRenderProp } from '@chakra-ui/react-types';
import * as _chakra_ui_system from '@chakra-ui/system';
import { ThemingProps, HTMLChakraProps, SystemStyleObject } from '@chakra-ui/system';
import { UsePopperProps } from '@chakra-ui/popper';
import { LazyMode } from '@chakra-ui/lazy-utils';
import * as react from 'react';
import react__default from 'react';
import { CloseButtonProps } from '@chakra-ui/close-button';
import { HTMLMotionProps, Variant } from 'framer-motion';

declare const TRIGGER: {
    readonly click: "click";
    readonly hover: "hover";
};
interface UsePopoverProps extends Omit<UsePopperProps, "enabled"> {
    /**
     * The html `id` attribute of the popover.
     * If not provided, we generate a unique id.
     *
     * This `id` is also used to auto-generate the `aria-labelledby`
     * and `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`
     */
    id?: string;
    /**
     * If `true`, the popover will be opened in controlled mode.
     */
    isOpen?: boolean;
    /**
     * If `true`, the popover will be initially opened.
     */
    defaultIsOpen?: boolean;
    /**
     * The `ref` of the element that should receive focus when the popover opens.
     */
    initialFocusRef?: React.RefObject<{
        focus(): void;
    }>;
    /**
     * If `true`, focus will be returned to the element that triggers the popover
     * when it closes
     * @default true
     */
    returnFocusOnClose?: boolean;
    /**
     * If `true`, focus will be transferred to the first interactive element
     * when the popover opens
     * @default true
     */
    autoFocus?: boolean;
    /**
     * If `true`, the popover will close when you blur out it by
     * clicking outside or tabbing out
     * @default true
     */
    closeOnBlur?: boolean;
    /**
     * If `true`, the popover will close when you hit the `Esc` key
     * @default true
     */
    closeOnEsc?: boolean;
    /**
     * Callback fired when the popover opens
     */
    onOpen?: () => void;
    /**
     * Callback fired when the popover closes
     */
    onClose?: () => void;
    /**
     * The size of the popover arrow
     */
    arrowSize?: number;
    /**
     * The `box-shadow` of the popover arrow
     */
    arrowShadowColor?: string;
    /**
     * The interaction that triggers the popover.
     *
     * `hover` - means the popover will open when you hover with mouse or
     * focus with keyboard on the popover trigger
     *
     * `click` - means the popover will open on click or
     * press `Enter` to `Space` on keyboard
     *
     * @default "click"
     */
    trigger?: keyof typeof TRIGGER;
    /**
     * @default 200
     */
    openDelay?: number;
    /**
     * @default 200
     */
    closeDelay?: number;
    /**
     * Performance ðŸš€:
     * If `true`, the PopoverContent rendering will be deferred
     * until the popover is open.
     */
    isLazy?: boolean;
    /**
     * Performance ðŸš€:
     * The lazy behavior of popover's content when not visible.
     * Only works when `isLazy={true}`
     *
     * - "unmount": The popover's content is always unmounted when not open.
     * - "keepMounted": The popover's content initially unmounted,
     * but stays mounted when popover is open.
     *
     * @default "unmount"
     */
    lazyBehavior?: LazyMode;
    /**
     * If `true`, the popover will be positioned when it mounts
     * (even if it's not open)
     *
     * Note ðŸš¨: We don't recommend using this in a popover/menu intensive UI or page
     * as it might affect scrolling performance.
     */
    computePositionOnMount?: boolean;
}
/**
 * @internal
 */
declare function usePopover(props?: UsePopoverProps): {
    forceUpdate: () => void;
    isOpen: boolean;
    onAnimationComplete: () => void;
    onClose: () => void;
    getAnchorProps: PropGetter<Record<string, unknown>, DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getArrowProps: PropGetter<Record<string, unknown>, DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getArrowInnerProps: PropGetter<Record<string, unknown>, DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getPopoverPositionerProps: PropGetter<Record<string, unknown>, DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getPopoverProps: PropGetter<Record<string, unknown>, DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getTriggerProps: PropGetter<Record<string, unknown>, DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getHeaderProps: PropGetter<Record<string, unknown>, DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getBodyProps: PropGetter<Record<string, unknown>, DOMAttributes<_chakra_ui_react_types.DOMElement>>;
};
declare type UsePopoverReturn = ReturnType<typeof usePopover>;

interface PopoverProps extends UsePopoverProps, ThemingProps<"Popover"> {
    /**
     * The content of the popover. It is usually the `PopoverTrigger`,
     * and `PopoverContent`
     */
    children?: MaybeRenderProp<{
        isOpen: boolean;
        onClose: () => void;
        forceUpdate: (() => void) | undefined;
    }>;
}
/**
 * Popover is used to bring attention to specific user interface elements,
 * typically to suggest an action or to guide users through a new experience.
 *
 * @see Docs https://chakra-ui.com/docs/components/popover
 */
declare function Popover(props: PopoverProps): JSX.Element;
declare namespace Popover {
    var displayName: string;
}

/**
 * PopoverAnchor is element that is used as the positioning reference
 * for the popover.
 */
declare function PopoverAnchor(props: React.PropsWithChildren<{}>): react.DetailedReactHTMLElement<react.AriaAttributes & react.DOMAttributes<_chakra_ui_react_types.DOMElement> & _chakra_ui_react_types.DataAttributes & {
    id?: string | undefined;
    role?: react.AriaRole | undefined;
    tabIndex?: number | undefined;
    style?: react.CSSProperties | undefined;
} & react.RefAttributes<any>, HTMLElement>;
declare namespace PopoverAnchor {
    var displayName: string;
}

interface PopoverArrowProps extends HTMLChakraProps<"div"> {
}
declare function PopoverArrow(props: PopoverArrowProps): JSX.Element;
declare namespace PopoverArrow {
    var displayName: string;
}

interface PopoverBodyProps extends HTMLChakraProps<"div"> {
}
/**
 * PopoverBody is the main content area for the popover. Should contain
 * at least one interactive element.
 */
declare const PopoverBody: _chakra_ui_system.ComponentWithAs<"div", PopoverBodyProps>;

declare type PopoverCloseButtonProps = CloseButtonProps;
declare const PopoverCloseButton: _chakra_ui_system.ComponentWithAs<"button", CloseButtonProps>;

declare type HTMLMotionChakraProps<T extends keyof react__default.ReactHTML> = Omit<HTMLChakraProps<T>, keyof HTMLMotionProps<T>> & Omit<HTMLMotionProps<T>, "style" | "onDrag" | "onDragEnd" | "onDragStart" | "onAnimationStart" | "variants" | "transition"> & {
    variants?: MotionVariants;
};
declare type MotionVariants = Partial<Record<"enter" | "exit", Variant>>;
interface PopoverTransitionProps extends HTMLMotionChakraProps<"section"> {
}

interface PopoverContentProps extends PopoverTransitionProps {
    rootProps?: HTMLChakraProps<"div">;
    motionProps?: HTMLMotionProps<"section">;
}
declare const PopoverContent: _chakra_ui_system.ComponentWithAs<"section", PopoverContentProps>;

interface PopoverFooterProps extends HTMLChakraProps<"footer"> {
}
declare function PopoverFooter(props: PopoverFooterProps): JSX.Element;
declare namespace PopoverFooter {
    var displayName: string;
}

interface PopoverHeaderProps extends HTMLChakraProps<"header"> {
}
/**
 * PopoverHeader is the accessible header or label
 * for the popover's content, and it is first announced by screenreaders.
 */
declare const PopoverHeader: _chakra_ui_system.ComponentWithAs<"header", PopoverHeaderProps>;

/**
 * PopoverTrigger opens the popover's content. It must be an interactive element
 * such as `button` or `a`.
 */
declare function PopoverTrigger(props: {
    children: React.ReactNode;
}): react.DetailedReactHTMLElement<react.AriaAttributes & react.DOMAttributes<_chakra_ui_react_types.DOMElement> & _chakra_ui_react_types.DataAttributes & {
    id?: string | undefined;
    role?: react.AriaRole | undefined;
    tabIndex?: number | undefined;
    style?: react.CSSProperties | undefined;
} & react.RefAttributes<any>, HTMLElement>;
declare namespace PopoverTrigger {
    var displayName: string;
}

declare const usePopoverContext: () => {
    forceUpdate: () => void;
    isOpen: boolean;
    onAnimationComplete: () => void;
    onClose: () => void;
    getAnchorProps: _chakra_ui_react_types.PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getArrowProps: _chakra_ui_react_types.PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getArrowInnerProps: _chakra_ui_react_types.PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getPopoverPositionerProps: _chakra_ui_react_types.PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getPopoverProps: _chakra_ui_react_types.PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getTriggerProps: _chakra_ui_react_types.PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getHeaderProps: _chakra_ui_react_types.PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getBodyProps: _chakra_ui_react_types.PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
};
declare const usePopoverStyles: () => Record<string, SystemStyleObject>;

export { Popover, PopoverAnchor, PopoverArrow, PopoverArrowProps, PopoverBody, PopoverBodyProps, PopoverCloseButton, PopoverCloseButtonProps, PopoverContent, PopoverContentProps, PopoverFooter, PopoverFooterProps, PopoverHeader, PopoverHeaderProps, PopoverProps, PopoverTrigger, UsePopoverProps, UsePopoverReturn, usePopover, usePopoverContext, usePopoverStyles };
