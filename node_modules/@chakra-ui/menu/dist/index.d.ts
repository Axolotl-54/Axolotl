import * as _chakra_ui_system from '@chakra-ui/system';
import { HTMLChakraProps, SystemProps, SystemStyleObject, ThemingProps } from '@chakra-ui/system';
import React$1, { ReactElement } from 'react';
import * as _chakra_ui_descendant from '@chakra-ui/descendant';
import { UsePopperProps } from '@chakra-ui/popper';
import { UseDisclosureProps } from '@chakra-ui/react-use-disclosure';
import { LazyMode } from '@chakra-ui/lazy-utils';
import { HTMLMotionProps } from 'framer-motion';

interface MenuButtonProps extends HTMLChakraProps<"button"> {
}
/**
 * The trigger for the menu list. Must be a direct child of `Menu`.
 *
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/menubutton/
 */
declare const MenuButton: _chakra_ui_system.ComponentWithAs<"button", MenuButtonProps>;

interface MenuCommandProps extends HTMLChakraProps<"span"> {
}
declare const MenuCommand: _chakra_ui_system.ComponentWithAs<"span", MenuCommandProps>;

interface MenuDividerProps extends HTMLChakraProps<"hr"> {
}
declare const MenuDivider: React.FC<MenuDividerProps>;

interface MenuGroupProps extends HTMLChakraProps<"div"> {
}
declare const MenuGroup: _chakra_ui_system.ComponentWithAs<"div", MenuGroupProps>;

declare const MenuIcon: React.FC<HTMLChakraProps<"span">>;

declare const MenuDescendantsProvider: React$1.Provider<_chakra_ui_descendant.DescendantsManager<HTMLElement, {}>>;
declare const useMenuDescendantsContext: () => _chakra_ui_descendant.DescendantsManager<HTMLElement, {}>;
declare const useMenuDescendants: () => _chakra_ui_descendant.DescendantsManager<HTMLElement, {}>;
declare const useMenuDescendant: (options?: {
    disabled?: boolean | undefined;
    id?: string | undefined;
} | undefined) => {
    descendants: _chakra_ui_descendant.UseDescendantsReturn; /**
     * If `true`, the menu will close when you click outside
     * the menu list
     *
     * @default true
     */
    index: number;
    enabledIndex: number;
    register: (node: HTMLElement | null) => void;
};
declare const MenuProvider: React$1.Provider<Omit<UseMenuReturn, "descendants">>;
declare const useMenuContext: () => Omit<UseMenuReturn, "descendants">;
interface UseMenuProps extends Omit<UsePopperProps, "enabled">, UseDisclosureProps {
    /**
     * If `true`, the menu will close when a menu item is
     * clicked
     *
     * @default true
     */
    closeOnSelect?: boolean;
    /**
     * If `true`, the menu will close when you click outside
     * the menu list
     *
     * @default true
     */
    closeOnBlur?: boolean;
    /**
     * If `true`, the first enabled menu item will receive focus and be selected
     * when the menu opens.
     *
     * @default true
     */
    autoSelect?: boolean;
    /**
     * Performance ðŸš€:
     * If `true`, the MenuItem rendering will be deferred
     * until the menu is open.
     */
    isLazy?: boolean;
    /**
     * Performance ðŸš€:
     * The lazy behavior of menu's content when not visible.
     * Only works when `isLazy={true}`
     *
     * - "unmount": The menu's content is always unmounted when not open.
     * - "keepMounted": The menu's content initially unmounted,
     * but stays mounted when menu is open.
     *
     * @default "unmount"
     */
    lazyBehavior?: LazyMode;
    /**
     * If `rtl`, poper placement positions will be flipped i.e. 'top-right' will
     * become 'top-left' and vice-verse
     */
    direction?: "ltr" | "rtl";
    computePositionOnMount?: boolean;
}
/**
 * React Hook to manage a menu
 *
 * It provides the logic and will be used with react context
 * to propagate its return value to all children
 */
declare function useMenu(props?: UseMenuProps): {
    openAndFocusMenu: () => void;
    openAndFocusFirstItem: () => void;
    openAndFocusLastItem: () => void;
    onTransitionEnd: () => void;
    unstable__animationState: {
        present: boolean;
        onComplete(): void;
    };
    descendants: _chakra_ui_descendant.DescendantsManager<HTMLElement, {}>;
    popper: any;
    buttonId: string;
    menuId: string;
    forceUpdate: any;
    orientation: string;
    isOpen: boolean;
    onToggle: () => void;
    onOpen: () => void;
    onClose: () => void;
    menuRef: React$1.RefObject<HTMLDivElement>;
    buttonRef: React$1.RefObject<HTMLButtonElement>;
    focusedIndex: number;
    closeOnSelect: boolean;
    closeOnBlur: boolean;
    autoSelect: boolean;
    setFocusedIndex: React$1.Dispatch<React$1.SetStateAction<number>>;
    isLazy: boolean | undefined;
    lazyBehavior: LazyMode;
};
interface UseMenuReturn extends ReturnType<typeof useMenu> {
}
interface UseMenuButtonProps extends Omit<React$1.HTMLAttributes<Element>, "color"> {
}
/**
 * React Hook to manage a menu button.
 *
 * The assumption here is that the `useMenu` hook is used
 * in a component higher up the tree, and its return value
 * is passed as `context` to this hook.
 */
declare function useMenuButton(props?: UseMenuButtonProps, externalRef?: React$1.Ref<any>): {
    ref: (node: any) => void;
    id: string;
    "data-active": boolean | "true" | "false";
    "aria-expanded": boolean;
    "aria-haspopup": boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    "aria-controls": string;
    onClick: (event: React$1.MouseEvent<Element, MouseEvent>) => void;
    onKeyDown: (event: React$1.KeyboardEvent<Element>) => void;
    children?: React$1.ReactNode;
    style?: React$1.CSSProperties | undefined;
    dir?: string | undefined;
    slot?: string | undefined;
    title?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    translate?: "no" | "yes" | undefined;
    property?: string | undefined;
    hidden?: boolean | undefined;
    'aria-disabled'?: (boolean | "true" | "false") | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: React$1.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "text" | "none" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "none" | "both" | "inline" | "list" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-current'?: boolean | "time" | "true" | "false" | "location" | "page" | "step" | "date" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    onCopy?: React$1.ClipboardEventHandler<Element> | undefined;
    onCopyCapture?: React$1.ClipboardEventHandler<Element> | undefined;
    onCut?: React$1.ClipboardEventHandler<Element> | undefined;
    onCutCapture?: React$1.ClipboardEventHandler<Element> | undefined;
    onPaste?: React$1.ClipboardEventHandler<Element> | undefined;
    onPasteCapture?: React$1.ClipboardEventHandler<Element> | undefined;
    onCompositionEnd?: React$1.CompositionEventHandler<Element> | undefined;
    onCompositionEndCapture?: React$1.CompositionEventHandler<Element> | undefined;
    onCompositionStart?: React$1.CompositionEventHandler<Element> | undefined;
    onCompositionStartCapture?: React$1.CompositionEventHandler<Element> | undefined;
    onCompositionUpdate?: React$1.CompositionEventHandler<Element> | undefined;
    onCompositionUpdateCapture?: React$1.CompositionEventHandler<Element> | undefined;
    onFocus?: React$1.FocusEventHandler<Element> | undefined;
    onFocusCapture?: React$1.FocusEventHandler<Element> | undefined;
    onBlur?: React$1.FocusEventHandler<Element> | undefined;
    onBlurCapture?: React$1.FocusEventHandler<Element> | undefined;
    onChange?: React$1.FormEventHandler<Element> | undefined;
    onChangeCapture?: React$1.FormEventHandler<Element> | undefined;
    onBeforeInput?: React$1.FormEventHandler<Element> | undefined;
    onBeforeInputCapture?: React$1.FormEventHandler<Element> | undefined;
    onInput?: React$1.FormEventHandler<Element> | undefined;
    onInputCapture?: React$1.FormEventHandler<Element> | undefined;
    onReset?: React$1.FormEventHandler<Element> | undefined;
    onResetCapture?: React$1.FormEventHandler<Element> | undefined;
    onSubmit?: React$1.FormEventHandler<Element> | undefined;
    onSubmitCapture?: React$1.FormEventHandler<Element> | undefined;
    onInvalid?: React$1.FormEventHandler<Element> | undefined;
    onInvalidCapture?: React$1.FormEventHandler<Element> | undefined;
    onLoad?: React$1.ReactEventHandler<Element> | undefined;
    onLoadCapture?: React$1.ReactEventHandler<Element> | undefined;
    onError?: React$1.ReactEventHandler<Element> | undefined;
    onErrorCapture?: React$1.ReactEventHandler<Element> | undefined;
    onKeyDownCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyPress?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyPressCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyUp?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyUpCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onAbort?: React$1.ReactEventHandler<Element> | undefined;
    onAbortCapture?: React$1.ReactEventHandler<Element> | undefined;
    onCanPlay?: React$1.ReactEventHandler<Element> | undefined;
    onCanPlayCapture?: React$1.ReactEventHandler<Element> | undefined;
    onCanPlayThrough?: React$1.ReactEventHandler<Element> | undefined;
    onCanPlayThroughCapture?: React$1.ReactEventHandler<Element> | undefined;
    onDurationChange?: React$1.ReactEventHandler<Element> | undefined;
    onDurationChangeCapture?: React$1.ReactEventHandler<Element> | undefined;
    onEmptied?: React$1.ReactEventHandler<Element> | undefined;
    onEmptiedCapture?: React$1.ReactEventHandler<Element> | undefined;
    onEncrypted?: React$1.ReactEventHandler<Element> | undefined;
    onEncryptedCapture?: React$1.ReactEventHandler<Element> | undefined;
    onEnded?: React$1.ReactEventHandler<Element> | undefined;
    onEndedCapture?: React$1.ReactEventHandler<Element> | undefined;
    onLoadedData?: React$1.ReactEventHandler<Element> | undefined;
    onLoadedDataCapture?: React$1.ReactEventHandler<Element> | undefined;
    onLoadedMetadata?: React$1.ReactEventHandler<Element> | undefined;
    onLoadedMetadataCapture?: React$1.ReactEventHandler<Element> | undefined;
    onLoadStart?: React$1.ReactEventHandler<Element> | undefined;
    onLoadStartCapture?: React$1.ReactEventHandler<Element> | undefined;
    onPause?: React$1.ReactEventHandler<Element> | undefined;
    onPauseCapture?: React$1.ReactEventHandler<Element> | undefined;
    onPlay?: React$1.ReactEventHandler<Element> | undefined;
    onPlayCapture?: React$1.ReactEventHandler<Element> | undefined;
    onPlaying?: React$1.ReactEventHandler<Element> | undefined;
    onPlayingCapture?: React$1.ReactEventHandler<Element> | undefined;
    onProgress?: React$1.ReactEventHandler<Element> | undefined;
    onProgressCapture?: React$1.ReactEventHandler<Element> | undefined;
    onRateChange?: React$1.ReactEventHandler<Element> | undefined;
    onRateChangeCapture?: React$1.ReactEventHandler<Element> | undefined;
    onSeeked?: React$1.ReactEventHandler<Element> | undefined;
    onSeekedCapture?: React$1.ReactEventHandler<Element> | undefined;
    onSeeking?: React$1.ReactEventHandler<Element> | undefined;
    onSeekingCapture?: React$1.ReactEventHandler<Element> | undefined;
    onStalled?: React$1.ReactEventHandler<Element> | undefined;
    onStalledCapture?: React$1.ReactEventHandler<Element> | undefined;
    onSuspend?: React$1.ReactEventHandler<Element> | undefined;
    onSuspendCapture?: React$1.ReactEventHandler<Element> | undefined;
    onTimeUpdate?: React$1.ReactEventHandler<Element> | undefined;
    onTimeUpdateCapture?: React$1.ReactEventHandler<Element> | undefined;
    onVolumeChange?: React$1.ReactEventHandler<Element> | undefined;
    onVolumeChangeCapture?: React$1.ReactEventHandler<Element> | undefined;
    onWaiting?: React$1.ReactEventHandler<Element> | undefined;
    onWaitingCapture?: React$1.ReactEventHandler<Element> | undefined;
    onAuxClick?: React$1.MouseEventHandler<Element> | undefined;
    onAuxClickCapture?: React$1.MouseEventHandler<Element> | undefined;
    onClickCapture?: React$1.MouseEventHandler<Element> | undefined;
    onContextMenu?: React$1.MouseEventHandler<Element> | undefined;
    onContextMenuCapture?: React$1.MouseEventHandler<Element> | undefined;
    onDoubleClick?: React$1.MouseEventHandler<Element> | undefined;
    onDoubleClickCapture?: React$1.MouseEventHandler<Element> | undefined;
    onDrag?: React$1.DragEventHandler<Element> | undefined;
    onDragCapture?: React$1.DragEventHandler<Element> | undefined;
    onDragEnd?: React$1.DragEventHandler<Element> | undefined;
    onDragEndCapture?: React$1.DragEventHandler<Element> | undefined;
    onDragEnter?: React$1.DragEventHandler<Element> | undefined;
    onDragEnterCapture?: React$1.DragEventHandler<Element> | undefined;
    onDragExit?: React$1.DragEventHandler<Element> | undefined;
    onDragExitCapture?: React$1.DragEventHandler<Element> | undefined;
    onDragLeave?: React$1.DragEventHandler<Element> | undefined;
    onDragLeaveCapture?: React$1.DragEventHandler<Element> | undefined;
    onDragOver?: React$1.DragEventHandler<Element> | undefined;
    onDragOverCapture?: React$1.DragEventHandler<Element> | undefined;
    onDragStart?: React$1.DragEventHandler<Element> | undefined;
    onDragStartCapture?: React$1.DragEventHandler<Element> | undefined;
    onDrop?: React$1.DragEventHandler<Element> | undefined;
    onDropCapture?: React$1.DragEventHandler<Element> | undefined;
    onMouseDown?: React$1.MouseEventHandler<Element> | undefined;
    onMouseDownCapture?: React$1.MouseEventHandler<Element> | undefined;
    onMouseEnter?: React$1.MouseEventHandler<Element> | undefined;
    onMouseLeave?: React$1.MouseEventHandler<Element> | undefined;
    onMouseMove?: React$1.MouseEventHandler<Element> | undefined;
    onMouseMoveCapture?: React$1.MouseEventHandler<Element> | undefined;
    onMouseOut?: React$1.MouseEventHandler<Element> | undefined;
    onMouseOutCapture?: React$1.MouseEventHandler<Element> | undefined;
    onMouseOver?: React$1.MouseEventHandler<Element> | undefined;
    onMouseOverCapture?: React$1.MouseEventHandler<Element> | undefined;
    onMouseUp?: React$1.MouseEventHandler<Element> | undefined;
    onMouseUpCapture?: React$1.MouseEventHandler<Element> | undefined;
    onSelect?: React$1.ReactEventHandler<Element> | undefined;
    onSelectCapture?: React$1.ReactEventHandler<Element> | undefined;
    onTouchCancel?: React$1.TouchEventHandler<Element> | undefined;
    onTouchCancelCapture?: React$1.TouchEventHandler<Element> | undefined;
    onTouchEnd?: React$1.TouchEventHandler<Element> | undefined;
    onTouchEndCapture?: React$1.TouchEventHandler<Element> | undefined;
    onTouchMove?: React$1.TouchEventHandler<Element> | undefined;
    onTouchMoveCapture?: React$1.TouchEventHandler<Element> | undefined;
    onTouchStart?: React$1.TouchEventHandler<Element> | undefined;
    onTouchStartCapture?: React$1.TouchEventHandler<Element> | undefined;
    onPointerDown?: React$1.PointerEventHandler<Element> | undefined;
    onPointerDownCapture?: React$1.PointerEventHandler<Element> | undefined;
    onPointerMove?: React$1.PointerEventHandler<Element> | undefined;
    onPointerMoveCapture?: React$1.PointerEventHandler<Element> | undefined;
    onPointerUp?: React$1.PointerEventHandler<Element> | undefined;
    onPointerUpCapture?: React$1.PointerEventHandler<Element> | undefined;
    onPointerCancel?: React$1.PointerEventHandler<Element> | undefined;
    onPointerCancelCapture?: React$1.PointerEventHandler<Element> | undefined;
    onPointerEnter?: React$1.PointerEventHandler<Element> | undefined;
    onPointerEnterCapture?: React$1.PointerEventHandler<Element> | undefined;
    onPointerLeave?: React$1.PointerEventHandler<Element> | undefined;
    onPointerLeaveCapture?: React$1.PointerEventHandler<Element> | undefined;
    onPointerOver?: React$1.PointerEventHandler<Element> | undefined;
    onPointerOverCapture?: React$1.PointerEventHandler<Element> | undefined;
    onPointerOut?: React$1.PointerEventHandler<Element> | undefined;
    onPointerOutCapture?: React$1.PointerEventHandler<Element> | undefined;
    onGotPointerCapture?: React$1.PointerEventHandler<Element> | undefined;
    onGotPointerCaptureCapture?: React$1.PointerEventHandler<Element> | undefined;
    onLostPointerCapture?: React$1.PointerEventHandler<Element> | undefined;
    onLostPointerCaptureCapture?: React$1.PointerEventHandler<Element> | undefined;
    onScroll?: React$1.UIEventHandler<Element> | undefined;
    onScrollCapture?: React$1.UIEventHandler<Element> | undefined;
    onWheel?: React$1.WheelEventHandler<Element> | undefined;
    onWheelCapture?: React$1.WheelEventHandler<Element> | undefined;
    onAnimationStart?: React$1.AnimationEventHandler<Element> | undefined;
    onAnimationStartCapture?: React$1.AnimationEventHandler<Element> | undefined;
    onAnimationEnd?: React$1.AnimationEventHandler<Element> | undefined;
    onAnimationEndCapture?: React$1.AnimationEventHandler<Element> | undefined;
    onAnimationIteration?: React$1.AnimationEventHandler<Element> | undefined;
    onAnimationIterationCapture?: React$1.AnimationEventHandler<Element> | undefined;
    onTransitionEnd?: React$1.TransitionEventHandler<Element> | undefined;
    onTransitionEndCapture?: React$1.TransitionEventHandler<Element> | undefined;
};
interface UseMenuListProps extends Omit<React$1.HTMLAttributes<Element>, "color"> {
}
/**
 * React Hook to manage a menu list.
 *
 * The assumption here is that the `useMenu` hook is used
 * in a component higher up the tree, and its return value
 * is passed as `context` to this hook.
 */
declare function useMenuList(props?: UseMenuListProps, ref?: React$1.Ref<any>): React$1.HTMLAttributes<HTMLElement> & React$1.RefAttributes<HTMLElement>;
declare function useMenuPositioner(props?: any): any;
interface UseMenuItemProps extends Omit<React$1.HTMLAttributes<Element>, "color" | "disabled"> {
    /**
     * If `true`, the menuitem will be disabled
     */
    isDisabled?: boolean;
    /**
     * If `true` and the menuitem is disabled, it'll
     * remain keyboard-focusable
     */
    isFocusable?: boolean;
    /**
     * Overrides the parent menu's `closeOnSelect` prop.
     */
    closeOnSelect?: boolean;
    /**
     * The type of the menuitem.
     */
    type?: React$1.ButtonHTMLAttributes<HTMLButtonElement>["type"];
}
declare function useMenuItem(props?: UseMenuItemProps, externalRef?: React$1.Ref<any>): {
    type: any;
    id: string;
    role: string;
    tabIndex: number;
    ref: (node: any) => void;
    "aria-disabled": boolean | undefined;
    disabled: boolean | undefined;
    onClick: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseDown: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseUp: React$1.MouseEventHandler<HTMLElement> | undefined;
    onKeyUp: React$1.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyDown: React$1.KeyboardEventHandler<HTMLElement> | undefined;
    onMouseOver: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseLeave: React$1.MouseEventHandler<HTMLElement> | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: React$1.CSSProperties | undefined;
    title?: string | undefined;
    translate?: "no" | "yes" | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "text" | "none" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "none" | "both" | "inline" | "list" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "time" | "true" | "false" | "location" | "page" | "step" | "date" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: React$1.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCopyCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCut?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCutCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onPaste?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onPasteCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCompositionEnd?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionEndCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStart?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStartCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdate?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdateCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onFocus?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onFocusCapture?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onBlur?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onBlurCapture?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onChange?: React$1.FormEventHandler<HTMLElement> | undefined;
    onChangeCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onBeforeInput?: React$1.FormEventHandler<HTMLElement> | undefined;
    onBeforeInputCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInput?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInputCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onReset?: React$1.FormEventHandler<HTMLElement> | undefined;
    onResetCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onSubmit?: React$1.FormEventHandler<HTMLElement> | undefined;
    onSubmitCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInvalid?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInvalidCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onLoad?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onError?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onErrorCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onKeyDownCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyPress?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyPressCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyUpCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onAbort?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onAbortCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlay?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThrough?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThroughCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onDurationChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onDurationChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEmptied?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEmptiedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEncrypted?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEncryptedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEnded?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEndedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedData?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedDataCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadata?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadataCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadStart?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadStartCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPause?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPauseCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlay?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlayCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlaying?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlayingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onProgress?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onProgressCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onRateChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onRateChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeeked?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeekedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeeking?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeekingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onStalled?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onStalledCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSuspend?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSuspendCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdate?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdateCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onWaiting?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onWaitingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onAuxClick?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onAuxClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onContextMenu?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onContextMenuCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClick?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDrag?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnd?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEndCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnter?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnterCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragExit?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragExitCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragLeave?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragLeaveCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragOver?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragOverCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragStart?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragStartCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDrop?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDropCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onMouseDownCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseEnter?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseMove?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseMoveCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOut?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOutCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOverCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseUpCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onSelect?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSelectCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTouchCancel?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchCancelCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchEnd?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchEndCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchMove?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchMoveCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchStart?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchStartCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onPointerDown?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerDownCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerMove?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerMoveCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerUp?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerUpCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancel?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancelCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnter?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnterCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeave?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeaveCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOver?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOverCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOut?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOutCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCaptureCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCaptureCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onScroll?: React$1.UIEventHandler<HTMLElement> | undefined;
    onScrollCapture?: React$1.UIEventHandler<HTMLElement> | undefined;
    onWheel?: React$1.WheelEventHandler<HTMLElement> | undefined;
    onWheelCapture?: React$1.WheelEventHandler<HTMLElement> | undefined;
    onAnimationStart?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationStartCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEnd?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEndCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIteration?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIterationCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onTransitionEnd?: React$1.TransitionEventHandler<HTMLElement> | undefined;
    onTransitionEndCapture?: React$1.TransitionEventHandler<HTMLElement> | undefined;
} | {
    type: any;
    id: string;
    role: string;
    tabIndex: number;
    ref: (node: any) => void;
    "data-active": boolean | "true" | "false";
    "aria-disabled": "true" | undefined;
    onClick: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseDown: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseUp: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    onKeyUp: (event: React$1.KeyboardEvent<HTMLElement>) => void;
    onKeyDown: (event: React$1.KeyboardEvent<HTMLElement>) => void;
    onMouseOver: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseLeave: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: React$1.CSSProperties | undefined;
    title?: string | undefined;
    translate?: "no" | "yes" | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "text" | "none" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "none" | "both" | "inline" | "list" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "time" | "true" | "false" | "location" | "page" | "step" | "date" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: React$1.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCopyCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCut?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCutCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onPaste?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onPasteCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCompositionEnd?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionEndCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStart?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStartCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdate?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdateCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onFocus?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onFocusCapture?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onBlur?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onBlurCapture?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onChange?: React$1.FormEventHandler<HTMLElement> | undefined;
    onChangeCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onBeforeInput?: React$1.FormEventHandler<HTMLElement> | undefined;
    onBeforeInputCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInput?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInputCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onReset?: React$1.FormEventHandler<HTMLElement> | undefined;
    onResetCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onSubmit?: React$1.FormEventHandler<HTMLElement> | undefined;
    onSubmitCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInvalid?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInvalidCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onLoad?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onError?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onErrorCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onKeyDownCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyPress?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyPressCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyUpCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onAbort?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onAbortCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlay?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThrough?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThroughCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onDurationChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onDurationChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEmptied?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEmptiedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEncrypted?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEncryptedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEnded?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEndedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedData?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedDataCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadata?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadataCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadStart?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadStartCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPause?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPauseCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlay?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlayCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlaying?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlayingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onProgress?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onProgressCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onRateChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onRateChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeeked?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeekedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeeking?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeekingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onStalled?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onStalledCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSuspend?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSuspendCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdate?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdateCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onWaiting?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onWaitingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onAuxClick?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onAuxClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onContextMenu?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onContextMenuCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClick?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDrag?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnd?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEndCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnter?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnterCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragExit?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragExitCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragLeave?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragLeaveCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragOver?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragOverCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragStart?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragStartCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDrop?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDropCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onMouseDownCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseEnter?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseMove?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseMoveCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOut?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOutCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOverCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseUpCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onSelect?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSelectCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTouchCancel?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchCancelCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchEnd?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchEndCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchMove?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchMoveCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchStart?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchStartCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onPointerDown?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerDownCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerMove?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerMoveCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerUp?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerUpCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancel?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancelCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnter?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnterCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeave?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeaveCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOver?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOverCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOut?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOutCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCaptureCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCaptureCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onScroll?: React$1.UIEventHandler<HTMLElement> | undefined;
    onScrollCapture?: React$1.UIEventHandler<HTMLElement> | undefined;
    onWheel?: React$1.WheelEventHandler<HTMLElement> | undefined;
    onWheelCapture?: React$1.WheelEventHandler<HTMLElement> | undefined;
    onAnimationStart?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationStartCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEnd?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEndCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIteration?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIterationCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onTransitionEnd?: React$1.TransitionEventHandler<HTMLElement> | undefined;
    onTransitionEndCapture?: React$1.TransitionEventHandler<HTMLElement> | undefined;
};
interface UseMenuOptionOptions {
    value?: string;
    isChecked?: boolean;
    type?: "radio" | "checkbox";
    children?: React$1.ReactNode;
}
interface UseMenuOptionProps extends Omit<UseMenuItemProps, "type">, UseMenuOptionOptions {
}
declare function useMenuOption(props?: UseMenuOptionProps, ref?: React$1.Ref<any>): {
    role: string;
    "aria-checked": boolean | "true" | "false" | "mixed" | undefined;
    type: any;
    id: string;
    tabIndex: number;
    ref: (node: any) => void;
    "aria-disabled": boolean | undefined;
    disabled: boolean | undefined;
    onClick: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseDown: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseUp: React$1.MouseEventHandler<HTMLElement> | undefined;
    onKeyUp: React$1.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyDown: React$1.KeyboardEventHandler<HTMLElement> | undefined;
    onMouseOver: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseLeave: React$1.MouseEventHandler<HTMLElement> | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: React$1.CSSProperties | undefined;
    title?: string | undefined;
    translate?: "no" | "yes" | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "text" | "none" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "none" | "both" | "inline" | "list" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "time" | "true" | "false" | "location" | "page" | "step" | "date" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: React$1.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCopyCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCut?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCutCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onPaste?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onPasteCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCompositionEnd?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionEndCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStart?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStartCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdate?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdateCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onFocus?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onFocusCapture?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onBlur?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onBlurCapture?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onChange?: React$1.FormEventHandler<HTMLElement> | undefined;
    onChangeCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onBeforeInput?: React$1.FormEventHandler<HTMLElement> | undefined;
    onBeforeInputCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInput?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInputCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onReset?: React$1.FormEventHandler<HTMLElement> | undefined;
    onResetCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onSubmit?: React$1.FormEventHandler<HTMLElement> | undefined;
    onSubmitCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInvalid?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInvalidCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onLoad?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onError?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onErrorCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onKeyDownCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyPress?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyPressCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyUpCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onAbort?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onAbortCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlay?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThrough?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThroughCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onDurationChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onDurationChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEmptied?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEmptiedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEncrypted?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEncryptedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEnded?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEndedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedData?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedDataCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadata?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadataCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadStart?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadStartCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPause?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPauseCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlay?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlayCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlaying?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlayingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onProgress?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onProgressCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onRateChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onRateChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeeked?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeekedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeeking?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeekingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onStalled?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onStalledCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSuspend?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSuspendCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdate?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdateCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onWaiting?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onWaitingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onAuxClick?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onAuxClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onContextMenu?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onContextMenuCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClick?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDrag?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnd?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEndCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnter?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnterCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragExit?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragExitCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragLeave?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragLeaveCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragOver?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragOverCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragStart?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragStartCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDrop?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDropCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onMouseDownCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseEnter?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseMove?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseMoveCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOut?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOutCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOverCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseUpCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onSelect?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSelectCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTouchCancel?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchCancelCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchEnd?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchEndCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchMove?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchMoveCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchStart?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchStartCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onPointerDown?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerDownCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerMove?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerMoveCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerUp?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerUpCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancel?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancelCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnter?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnterCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeave?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeaveCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOver?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOverCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOut?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOutCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCaptureCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCaptureCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onScroll?: React$1.UIEventHandler<HTMLElement> | undefined;
    onScrollCapture?: React$1.UIEventHandler<HTMLElement> | undefined;
    onWheel?: React$1.WheelEventHandler<HTMLElement> | undefined;
    onWheelCapture?: React$1.WheelEventHandler<HTMLElement> | undefined;
    onAnimationStart?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationStartCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEnd?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEndCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIteration?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIterationCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onTransitionEnd?: React$1.TransitionEventHandler<HTMLElement> | undefined;
    onTransitionEndCapture?: React$1.TransitionEventHandler<HTMLElement> | undefined;
} | {
    role: string;
    "aria-checked": boolean | "true" | "false" | "mixed" | undefined;
    type: any;
    id: string;
    tabIndex: number;
    ref: (node: any) => void;
    "data-active": boolean | "true" | "false";
    "aria-disabled": "true" | undefined;
    onClick: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseDown: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseUp: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    onKeyUp: (event: React$1.KeyboardEvent<HTMLElement>) => void;
    onKeyDown: (event: React$1.KeyboardEvent<HTMLElement>) => void;
    onMouseOver: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseLeave: (event: React$1.MouseEvent<HTMLElement, MouseEvent>) => void;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: React$1.CSSProperties | undefined;
    title?: string | undefined;
    translate?: "no" | "yes" | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "text" | "none" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "none" | "both" | "inline" | "list" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "time" | "true" | "false" | "location" | "page" | "step" | "date" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: React$1.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCopyCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCut?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCutCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onPaste?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onPasteCapture?: React$1.ClipboardEventHandler<HTMLElement> | undefined;
    onCompositionEnd?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionEndCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStart?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStartCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdate?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdateCapture?: React$1.CompositionEventHandler<HTMLElement> | undefined;
    onFocus?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onFocusCapture?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onBlur?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onBlurCapture?: React$1.FocusEventHandler<HTMLElement> | undefined;
    onChange?: React$1.FormEventHandler<HTMLElement> | undefined;
    onChangeCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onBeforeInput?: React$1.FormEventHandler<HTMLElement> | undefined;
    onBeforeInputCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInput?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInputCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onReset?: React$1.FormEventHandler<HTMLElement> | undefined;
    onResetCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onSubmit?: React$1.FormEventHandler<HTMLElement> | undefined;
    onSubmitCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInvalid?: React$1.FormEventHandler<HTMLElement> | undefined;
    onInvalidCapture?: React$1.FormEventHandler<HTMLElement> | undefined;
    onLoad?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onError?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onErrorCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onKeyDownCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyPress?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyPressCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onKeyUpCapture?: React$1.KeyboardEventHandler<Element> | undefined;
    onAbort?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onAbortCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlay?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThrough?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThroughCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onDurationChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onDurationChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEmptied?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEmptiedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEncrypted?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEncryptedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEnded?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onEndedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedData?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedDataCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadata?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadataCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadStart?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onLoadStartCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPause?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPauseCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlay?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlayCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlaying?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onPlayingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onProgress?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onProgressCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onRateChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onRateChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeeked?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeekedCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeeking?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSeekingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onStalled?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onStalledCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSuspend?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSuspendCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdate?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdateCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChange?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChangeCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onWaiting?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onWaitingCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onAuxClick?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onAuxClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onContextMenu?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onContextMenuCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClick?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClickCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onDrag?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnd?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEndCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnter?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragEnterCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragExit?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragExitCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragLeave?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragLeaveCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragOver?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragOverCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragStart?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDragStartCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDrop?: React$1.DragEventHandler<HTMLElement> | undefined;
    onDropCapture?: React$1.DragEventHandler<HTMLElement> | undefined;
    onMouseDownCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseEnter?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseMove?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseMoveCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOut?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOutCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseOverCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onMouseUpCapture?: React$1.MouseEventHandler<HTMLElement> | undefined;
    onSelect?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onSelectCapture?: React$1.ReactEventHandler<HTMLElement> | undefined;
    onTouchCancel?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchCancelCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchEnd?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchEndCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchMove?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchMoveCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchStart?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onTouchStartCapture?: React$1.TouchEventHandler<HTMLElement> | undefined;
    onPointerDown?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerDownCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerMove?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerMoveCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerUp?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerUpCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancel?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancelCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnter?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnterCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeave?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeaveCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOver?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOverCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOut?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onPointerOutCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCaptureCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCaptureCapture?: React$1.PointerEventHandler<HTMLElement> | undefined;
    onScroll?: React$1.UIEventHandler<HTMLElement> | undefined;
    onScrollCapture?: React$1.UIEventHandler<HTMLElement> | undefined;
    onWheel?: React$1.WheelEventHandler<HTMLElement> | undefined;
    onWheelCapture?: React$1.WheelEventHandler<HTMLElement> | undefined;
    onAnimationStart?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationStartCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEnd?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEndCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIteration?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIterationCapture?: React$1.AnimationEventHandler<HTMLElement> | undefined;
    onTransitionEnd?: React$1.TransitionEventHandler<HTMLElement> | undefined;
    onTransitionEndCapture?: React$1.TransitionEventHandler<HTMLElement> | undefined;
};
interface UseMenuOptionGroupProps {
    value?: string | string[];
    defaultValue?: string | string[];
    type?: "radio" | "checkbox";
    onChange?: (value: string | string[]) => void;
    children?: React$1.ReactNode;
}
declare function useMenuOptionGroup(props?: UseMenuOptionGroupProps): {
    children: React$1.ReactElement<any, string | React$1.JSXElementConstructor<any>>[];
};
declare function useMenuState(): {
    isOpen: boolean;
    onClose: () => void;
};

interface StyledMenuItemProps extends HTMLChakraProps<"button"> {
}
interface MenuItemOptions extends Pick<UseMenuItemProps, "isDisabled" | "isFocusable" | "closeOnSelect"> {
    /**
     * The icon to render before the menu item's label.
     * @type React.ReactElement
     */
    icon?: React.ReactElement;
    /**
     * The spacing between the icon and menu item's label.
     * @type SystemProps["mr"]
     */
    iconSpacing?: SystemProps["mr"];
    /**
     * Right-aligned label text content, useful for displaying hotkeys.
     */
    command?: string;
    /**
     * The spacing between the command and menu item's label.
     * @type SystemProps["ml"]
     */
    commandSpacing?: SystemProps["ml"];
}
/**
 * Use prop `isDisabled` instead
 */
declare type IsDisabledProps = "disabled" | "aria-disabled";
interface MenuItemProps extends Omit<HTMLChakraProps<"button">, IsDisabledProps>, MenuItemOptions {
}
declare const MenuItem: _chakra_ui_system.ComponentWithAs<"button", MenuItemProps>;

interface MenuItemOptionProps extends UseMenuOptionOptions, Omit<MenuItemProps, keyof UseMenuOptionOptions | "icon"> {
    /**
     * @type React.ReactElement
     */
    icon?: ReactElement | null;
    /**
     * @type SystemProps["mr"]
     */
    iconSpacing?: SystemProps["mr"];
}
declare const MenuItemOption: _chakra_ui_system.ComponentWithAs<"button", MenuItemOptionProps>;

interface MenuListProps extends HTMLChakraProps<"div"> {
    /**
     * Props for the root element that positions the menu.
     */
    rootProps?: HTMLChakraProps<"div">;
    /**
     * The framer-motion props to animate the menu list
     */
    motionProps?: HTMLMotionProps<"div">;
}
declare const MenuList: _chakra_ui_system.ComponentWithAs<"div", MenuListProps>;

interface MenuOptionGroupProps extends UseMenuOptionGroupProps, Omit<MenuGroupProps, "value" | "defaultValue" | "onChange"> {
}
declare const MenuOptionGroup: React.FC<MenuOptionGroupProps>;

declare const useMenuStyles: () => Record<string, SystemStyleObject>;

declare type MaybeRenderProp<P> = React.ReactNode | ((props: P) => React.ReactNode);
interface MenuProps extends UseMenuProps, ThemingProps<"Menu"> {
    children: MaybeRenderProp<{
        isOpen: boolean;
        onClose: () => void;
        forceUpdate: (() => void) | undefined;
    }>;
}
/**
 * Menu provides context, state, and focus management
 * to its sub-components. It doesn't render any DOM node.
 *
 * @see Docs https://chakra-ui.com/docs/components/menu
 */
declare const Menu: React.FC<MenuProps>;

export { Menu, MenuButton, MenuButtonProps, MenuCommand, MenuCommandProps, MenuDescendantsProvider, MenuDivider, MenuDividerProps, MenuGroup, MenuGroupProps, MenuIcon, MenuItem, MenuItemOption, MenuItemOptionProps, MenuItemProps, MenuList, MenuListProps, MenuOptionGroup, MenuOptionGroupProps, MenuProps, MenuProvider, StyledMenuItemProps, UseMenuButtonProps, UseMenuItemProps, UseMenuListProps, UseMenuOptionGroupProps, UseMenuOptionOptions, UseMenuOptionProps, UseMenuProps, UseMenuReturn, useMenu, useMenuButton, useMenuContext, useMenuDescendant, useMenuDescendants, useMenuDescendantsContext, useMenuItem, useMenuList, useMenuOption, useMenuOptionGroup, useMenuPositioner, useMenuState, useMenuStyles };
