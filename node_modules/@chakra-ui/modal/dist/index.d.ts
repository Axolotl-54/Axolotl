import * as react from 'react';
import { FocusLockProps } from '@chakra-ui/focus-lock';
import { PortalProps } from '@chakra-ui/portal';
import * as _chakra_ui_system from '@chakra-ui/system';
import { SystemStyleObject, ThemingProps, HTMLChakraProps, ChakraProps } from '@chakra-ui/system';
import * as _chakra_ui_react_types from '@chakra-ui/react-types';
import { PropGetter } from '@chakra-ui/react-types';
import { CloseButtonProps } from '@chakra-ui/close-button';
import { HTMLMotionProps } from 'framer-motion';
import { SlideOptions } from '@chakra-ui/transition';

interface UseModalProps {
    /**
     * If `true`, the modal will be open.
     */
    isOpen: boolean;
    /**
     * The `id` of the modal
     */
    id?: string;
    /**
     * Callback invoked to close the modal.
     */
    onClose(): void;
    /**
     * If `true`, the modal will close when the overlay is clicked
     * @default true
     */
    closeOnOverlayClick?: boolean;
    /**
     * If `true`, the modal will close when the `Esc` key is pressed
     * @default true
     */
    closeOnEsc?: boolean;
    /**
     * Callback fired when the overlay is clicked.
     */
    onOverlayClick?(): void;
    /**
     * Callback fired when the escape key is pressed and focus is within modal
     */
    onEsc?(): void;
    /**
     * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`
     * set to `true` so that screen readers can only see the `modal`.
     *
     * This is commonly known as making the other elements **inert**
     *
     * @default true
     */
    useInert?: boolean;
}
/**
 * Modal hook that manages all the logic for the modal dialog widget
 * and returns prop getters, state and actions.
 *
 * @param props
 */
declare function useModal(props: UseModalProps): {
    isOpen: boolean;
    onClose: () => void;
    headerId: string;
    bodyId: string;
    setBodyMounted: react.Dispatch<react.SetStateAction<boolean>>;
    setHeaderMounted: react.Dispatch<react.SetStateAction<boolean>>;
    dialogRef: react.RefObject<HTMLElement>;
    overlayRef: react.RefObject<HTMLElement>;
    getDialogProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
    getDialogContainerProps: PropGetter<Record<string, unknown>, _chakra_ui_react_types.DOMAttributes<_chakra_ui_react_types.DOMElement>>;
};
declare type UseModalReturn = ReturnType<typeof useModal>;
/**
 * Modal hook to polyfill `aria-modal`.
 *
 * It applies `aria-hidden` to elements behind the modal
 * to indicate that they're `inert`.
 *
 * @param ref React ref of the node
 * @param shouldHide whether `aria-hidden` should be applied
 */
declare function useAriaHidden(ref: React.RefObject<HTMLElement>, shouldHide: boolean): void;

interface FocusableElement {
    focus(options?: FocusOptions): void;
}
declare const useModalStyles: () => Record<string, SystemStyleObject>;

interface ModalOptions extends Pick<FocusLockProps, "lockFocusAcrossFrames"> {
    /**
     * If `false`, focus lock will be disabled completely.
     *
     * This is useful in situations where you still need to interact with
     * other surrounding elements.
     *
     * ðŸš¨Warning: We don't recommend doing this because it hurts the
     * accessibility of the modal, based on WAI-ARIA specifications.
     *
     * @default true
     */
    trapFocus?: boolean;
    /**
     * If `true`, the modal will autofocus the first enabled and interactive
     * element within the `ModalContent`
     *
     * @default true
     */
    autoFocus?: boolean;
    /**
     * The `ref` of element to receive focus when the modal opens.
     */
    initialFocusRef?: React.RefObject<FocusableElement>;
    /**
     * The `ref` of element to receive focus when the modal closes.
     */
    finalFocusRef?: React.RefObject<FocusableElement>;
    /**
     * If `true`, the modal will return focus to the element that triggered it when it closes.
     * @default true
     */
    returnFocusOnClose?: boolean;
    /**
     * If `true`, scrolling will be disabled on the `body` when the modal opens.
     * @default true
     */
    blockScrollOnMount?: boolean;
    /**
     * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.
     * @default false.
     */
    allowPinchZoom?: boolean;
    /**
     * If `true`, a `padding-right` will be applied to the body element
     * that's equal to the width of the scrollbar.
     *
     * This can help prevent some unpleasant flickering effect
     * and content adjustment when the modal opens
     */
    preserveScrollBarGap?: boolean;
}
declare type ScrollBehavior = "inside" | "outside";
declare type MotionPreset = "slideInBottom" | "slideInRight" | "scale" | "none";
interface ModalProps extends UseModalProps, ModalOptions, ThemingProps<"Modal"> {
    children: React.ReactNode;
    /**
     *  If `true`, the modal will be centered on screen.
     * @default false
     */
    isCentered?: boolean;
    /**
     * Where scroll behavior should originate.
     * - If set to `inside`, scroll only occurs within the `ModalBody`.
     * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.
     *
     * @default "outside"
     */
    scrollBehavior?: ScrollBehavior;
    /**
     * Props to be forwarded to the portal component
     */
    portalProps?: Pick<PortalProps, "appendToParentPortal" | "containerRef">;
    /**
     * The transition that should be used for the modal
     * @default "scale"
     */
    motionPreset?: MotionPreset;
    /**
     * Fires when all exiting nodes have completed animating out
     */
    onCloseComplete?: () => void;
}
interface ModalContext extends ModalOptions, UseModalReturn {
    /**
     * The transition that should be used for the modal
     */
    motionPreset?: MotionPreset;
}
declare const ModalContextProvider: react.Provider<ModalContext>;
declare const useModalContext: () => ModalContext;
/**
 * Modal provides context, theming, and accessibility properties
 * to all other modal components.
 *
 * It doesn't render any DOM node.
 *
 * @see Docs https://chakra-ui.com/docs/components/modal
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/
 */
declare const Modal: React.FC<ModalProps>;

interface ModalBodyProps extends HTMLChakraProps<"div"> {
}
/**
 * ModalBody
 *
 * React component that houses the main content of the modal.
 *
 * @see Docs https://chakra-ui.com/modal
 */
declare const ModalBody: _chakra_ui_system.ComponentWithAs<"div", ModalBodyProps>;

/**
 * ModalCloseButton is used closes the modal.
 *
 * You don't need to pass the `onClick` to it, it reads the
 * `onClose` action from the modal context.
 */
declare const ModalCloseButton: _chakra_ui_system.ComponentWithAs<"button", CloseButtonProps>;

interface ModalContentProps extends HTMLChakraProps<"section"> {
    /**
     * The props to forward to the modal's content wrapper
     */
    containerProps?: HTMLChakraProps<"div">;
    /**
     * The custom framer-motion transition to use for the modal
     */
    motionProps?: HTMLMotionProps<"section">;
}
/**
 * ModalContent is used to group modal's content. It has all the
 * necessary `aria-*` properties to indicate that it is a modal
 */
declare const ModalContent: _chakra_ui_system.ComponentWithAs<"section", ModalContentProps>;

interface ModalFocusScopeProps {
    /**
     * @type React.ReactElement
     */
    children: React.ReactElement;
}
declare function ModalFocusScope(props: ModalFocusScopeProps): JSX.Element;

interface ModalFooterProps extends HTMLChakraProps<"footer"> {
}
/**
 * ModalFooter houses the action buttons of the modal.
 * @see Docs https://chakra-ui.com/modal
 */
declare const ModalFooter: _chakra_ui_system.ComponentWithAs<"footer", ModalFooterProps>;

interface ModalHeaderProps extends HTMLChakraProps<"header"> {
}
/**
 * ModalHeader
 *
 * React component that houses the title of the modal.
 *
 * @see Docs https://chakra-ui.com/modal
 */
declare const ModalHeader: _chakra_ui_system.ComponentWithAs<"header", ModalHeaderProps>;

interface ModalOverlayProps extends Omit<HTMLMotionProps<"div">, "color" | "transition">, ChakraProps {
    children?: React.ReactNode;
    motionProps?: HTMLMotionProps<"div">;
}
/**
 * ModalOverlay renders a backdrop behind the modal. It is
 * also used as a wrapper for the modal content for better positioning.
 *
 * @see Docs https://chakra-ui.com/modal
 */
declare const ModalOverlay: _chakra_ui_system.ComponentWithAs<"div", ModalOverlayProps>;

interface AlertDialogProps extends Omit<ModalProps, "initialFocusRef"> {
    leastDestructiveRef: NonNullable<ModalProps["initialFocusRef"]>;
}
/**
 * `AlertDialog` component is used interrupt the user with a mandatory confirmation or action.
 *
 * @see Docs https://chakra-ui.com/docs/components/alert-dialog
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/alertdialog/
 */
declare function AlertDialog(props: AlertDialogProps): JSX.Element;
declare const AlertDialogContent: _chakra_ui_system.ComponentWithAs<"section", ModalContentProps>;

declare const useDrawerContext: () => DrawerOptions;
declare type LogicalPlacement = "start" | "end";
declare type DrawerPlacement = SlideOptions["direction"] | LogicalPlacement;
interface DrawerOptions {
    /**
     * The placement of the drawer
     * @default "right"
     */
    placement?: DrawerPlacement;
    /**
     * If `true` and drawer's placement is `top` or `bottom`,
     * the drawer will occupy the viewport height (100vh)
     */
    isFullHeight?: boolean;
}
interface DrawerProps extends DrawerOptions, ThemingProps<"Drawer">, Omit<ModalProps, "scrollBehavior" | "motionPreset" | "isCentered" | keyof ThemingProps> {
}
/**
 * The Drawer component is a panel that slides out from the edge of the screen.
 * It can be useful when you need users to complete a task or view some details without leaving the current page.
 *
 * @see Docs https://chakra-ui.com/docs/components/drawer
 */
declare function Drawer(props: DrawerProps): JSX.Element;

interface DrawerContentProps extends HTMLChakraProps<"section"> {
    /**
     * The props to forward to the modal's content wrapper
     */
    containerProps?: HTMLChakraProps<"div">;
    /**
     * The custom framer-motion transition to use for the modal
     */
    motionProps?: HTMLMotionProps<"section">;
}
/**
 * ModalContent is used to group modal's content. It has all the
 * necessary `aria-*` properties to indicate that it is a modal
 */
declare const DrawerContent: _chakra_ui_system.ComponentWithAs<"section", DrawerContentProps>;

export { AlertDialog, ModalBody as AlertDialogBody, ModalCloseButton as AlertDialogCloseButton, AlertDialogContent, ModalFooter as AlertDialogFooter, ModalHeader as AlertDialogHeader, ModalOverlay as AlertDialogOverlay, AlertDialogProps, Drawer, ModalBody as DrawerBody, ModalCloseButton as DrawerCloseButton, DrawerContent, DrawerContentProps, ModalFooter as DrawerFooter, ModalHeader as DrawerHeader, ModalOverlay as DrawerOverlay, DrawerProps, Modal, ModalBody, ModalBodyProps, ModalCloseButton, ModalContent, ModalContentProps, ModalContextProvider, ModalFocusScope, ModalFooter, ModalFooterProps, ModalHeader, ModalHeaderProps, ModalOverlay, ModalOverlayProps, ModalProps, UseModalProps, UseModalReturn, useAriaHidden, useDrawerContext, useModal, useModalContext, useModalStyles };
