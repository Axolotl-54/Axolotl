"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Radio: () => Radio,
  RadioGroup: () => RadioGroup,
  useRadio: () => useRadio,
  useRadioGroup: () => useRadioGroup,
  useRadioGroupContext: () => useRadioGroupContext
});
module.exports = __toCommonJS(src_exports);

// ../../../react-shim.js
var import_react = __toESM(require("react"));

// src/radio.tsx
var import_system2 = require("@chakra-ui/system");

// ../../utilities/shared-utils/src/index.ts
var cx = (...classNames) => classNames.filter(Boolean).join(" ");
function isObject(value) {
  const type = typeof value;
  return value != null && (type === "object" || type === "function") && !Array.isArray(value);
}
var dataAttr = (condition) => condition ? "" : void 0;
var ariaAttr = (condition) => condition ? true : void 0;
function callAllHandlers(...fns) {
  return function func(event) {
    fns.some((fn) => {
      fn == null ? void 0 : fn(event);
      return event == null ? void 0 : event.defaultPrevented;
    });
  };
}
function callAll(...fns) {
  return function mergedFn(arg) {
    fns.forEach((fn) => {
      fn == null ? void 0 : fn(arg);
    });
  };
}

// ../../utilities/object-utils/src/index.ts
function split(object, keys) {
  const picked = {};
  const omitted = {};
  for (const [key, value] of Object.entries(object)) {
    if (keys.includes(key))
      picked[key] = value;
    else
      omitted[key] = value;
  }
  return [picked, omitted];
}

// src/radio-group.tsx
var import_system = require("@chakra-ui/system");
var import_react_context = require("@chakra-ui/react-context");

// src/use-radio-group.ts
var import_react_use_merge_refs = require("@chakra-ui/react-use-merge-refs");
var import_react2 = require("react");
function isInputEvent(value) {
  return value && isObject(value) && isObject(value.target);
}
function useRadioGroup(props = {}) {
  const {
    onChange: onChangeProp,
    value: valueProp,
    defaultValue,
    name: nameProp,
    isDisabled,
    isFocusable,
    isNative,
    ...htmlProps
  } = props;
  const [valueState, setValue] = (0, import_react2.useState)(defaultValue || "");
  const isControlled = typeof valueProp !== "undefined";
  const value = isControlled ? valueProp : valueState;
  const ref = (0, import_react2.useRef)(null);
  const focus = (0, import_react2.useCallback)(() => {
    const rootNode = ref.current;
    if (!rootNode)
      return;
    let query = `input:not(:disabled):checked`;
    const firstEnabledAndCheckedInput = rootNode.querySelector(query);
    if (firstEnabledAndCheckedInput) {
      firstEnabledAndCheckedInput.focus();
      return;
    }
    query = `input:not(:disabled)`;
    const firstEnabledInput = rootNode.querySelector(query);
    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();
  }, []);
  const uuid = (0, import_react2.useId)();
  const fallbackName = `radio-${uuid}`;
  const name = nameProp || fallbackName;
  const onChange = (0, import_react2.useCallback)((eventOrValue) => {
    const nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
    if (!isControlled) {
      setValue(nextValue);
    }
    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));
  }, [onChangeProp, isControlled]);
  const getRootProps = (0, import_react2.useCallback)((props2 = {}, forwardedRef = null) => ({
    ...props2,
    ref: (0, import_react_use_merge_refs.mergeRefs)(forwardedRef, ref),
    role: "radiogroup"
  }), []);
  const getRadioProps = (0, import_react2.useCallback)((props2 = {}, ref2 = null) => {
    const checkedKey = isNative ? "checked" : "isChecked";
    return {
      ...props2,
      ref: ref2,
      name,
      [checkedKey]: value != null ? props2.value === value : void 0,
      onChange(event) {
        onChange(event);
      },
      "data-radiogroup": true
    };
  }, [isNative, name, onChange, value]);
  return {
    getRootProps,
    getRadioProps,
    name,
    ref,
    focus,
    setValue,
    value,
    onChange,
    isDisabled,
    isFocusable,
    htmlProps
  };
}

// src/radio-group.tsx
var import_react3 = require("react");
var [RadioGroupProvider, useRadioGroupContext] = (0, import_react_context.createContext)({
  name: "RadioGroupContext",
  strict: false
});
var RadioGroup = (0, import_system.forwardRef)((props, ref) => {
  const {
    colorScheme,
    size,
    variant,
    children,
    className,
    isDisabled,
    isFocusable,
    ...rest
  } = props;
  const { value, onChange, getRootProps, name, htmlProps } = useRadioGroup(rest);
  const group = (0, import_react3.useMemo)(() => ({
    name,
    size,
    onChange,
    colorScheme,
    value,
    variant,
    isDisabled,
    isFocusable
  }), [
    name,
    size,
    onChange,
    colorScheme,
    value,
    variant,
    isDisabled,
    isFocusable
  ]);
  return /* @__PURE__ */ import_react.default.createElement(RadioGroupProvider, {
    value: group
  }, /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    ...getRootProps(htmlProps, ref),
    className: cx("chakra-radio-group", className)
  }, children));
});
RadioGroup.displayName = "RadioGroup";

// src/use-radio.ts
var import_form_control = require("@chakra-ui/form-control");

// ../visually-hidden/src/visually-hidden.style.ts
var visuallyHiddenStyle = {
  border: "0",
  clip: "rect(0, 0, 0, 0)",
  height: "1px",
  width: "1px",
  margin: "-1px",
  padding: "0",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};

// src/use-radio.ts
var import_focus_visible = require("@zag-js/focus-visible");
var import_react4 = require("react");
function useRadio(props = {}) {
  const {
    defaultChecked,
    isChecked: isCheckedProp,
    isFocusable,
    isDisabled: isDisabledProp,
    isReadOnly: isReadOnlyProp,
    isRequired: isRequiredProp,
    onChange,
    isInvalid: isInvalidProp,
    name,
    value,
    id: idProp,
    "data-radiogroup": dataRadioGroup,
    "aria-describedby": ariaDescribedBy,
    ...htmlProps
  } = props;
  const uuid = `radio-${(0, import_react4.useId)()}`;
  const formControl = (0, import_form_control.useFormControlContext)();
  const group = useRadioGroupContext();
  const isWithinRadioGroup = !!group || !!dataRadioGroup;
  const isWithinFormControl = !!formControl;
  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;
  id = idProp ?? id;
  const isDisabled = isDisabledProp ?? (formControl == null ? void 0 : formControl.isDisabled);
  const isReadOnly = isReadOnlyProp ?? (formControl == null ? void 0 : formControl.isReadOnly);
  const isRequired = isRequiredProp ?? (formControl == null ? void 0 : formControl.isRequired);
  const isInvalid = isInvalidProp ?? (formControl == null ? void 0 : formControl.isInvalid);
  const [isFocusVisible, setIsFocusVisible] = (0, import_react4.useState)(false);
  const [isFocused, setFocused] = (0, import_react4.useState)(false);
  const [isHovered, setHovering] = (0, import_react4.useState)(false);
  const [isActive, setActive] = (0, import_react4.useState)(false);
  const [isCheckedState, setChecked] = (0, import_react4.useState)(Boolean(defaultChecked));
  const isControlled = typeof isCheckedProp !== "undefined";
  const isChecked = isControlled ? isCheckedProp : isCheckedState;
  (0, import_react4.useEffect)(() => {
    return (0, import_focus_visible.trackFocusVisible)(setIsFocusVisible);
  }, []);
  const handleChange = (0, import_react4.useCallback)((event) => {
    if (isReadOnly || isDisabled) {
      event.preventDefault();
      return;
    }
    if (!isControlled) {
      setChecked(event.target.checked);
    }
    onChange == null ? void 0 : onChange(event);
  }, [isControlled, isDisabled, isReadOnly, onChange]);
  const onKeyDown = (0, import_react4.useCallback)((event) => {
    if (event.key === " ") {
      setActive(true);
    }
  }, [setActive]);
  const onKeyUp = (0, import_react4.useCallback)((event) => {
    if (event.key === " ") {
      setActive(false);
    }
  }, [setActive]);
  const getRadioProps = (0, import_react4.useCallback)((props2 = {}, ref = null) => ({
    ...props2,
    ref,
    "data-active": dataAttr(isActive),
    "data-hover": dataAttr(isHovered),
    "data-disabled": dataAttr(isDisabled),
    "data-invalid": dataAttr(isInvalid),
    "data-checked": dataAttr(isChecked),
    "data-focus": dataAttr(isFocused),
    "data-focus-visible": dataAttr(isFocused && isFocusVisible),
    "data-readonly": dataAttr(isReadOnly),
    "aria-hidden": true,
    onMouseDown: callAllHandlers(props2.onMouseDown, () => setActive(true)),
    onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),
    onMouseEnter: callAllHandlers(props2.onMouseEnter, () => setHovering(true)),
    onMouseLeave: callAllHandlers(props2.onMouseLeave, () => setHovering(false))
  }), [
    isActive,
    isHovered,
    isDisabled,
    isInvalid,
    isChecked,
    isFocused,
    isReadOnly,
    isFocusVisible
  ]);
  const { onFocus, onBlur } = formControl ?? {};
  const getInputProps = (0, import_react4.useCallback)((props2 = {}, ref = null) => {
    const trulyDisabled = isDisabled && !isFocusable;
    return {
      ...props2,
      id,
      ref,
      type: "radio",
      name,
      value,
      onChange: callAllHandlers(props2.onChange, handleChange),
      onBlur: callAllHandlers(onBlur, props2.onBlur, () => setFocused(false)),
      onFocus: callAllHandlers(onFocus, props2.onFocus, () => setFocused(true)),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
      checked: isChecked,
      disabled: trulyDisabled,
      readOnly: isReadOnly,
      required: isRequired,
      "aria-invalid": ariaAttr(isInvalid),
      "aria-disabled": ariaAttr(trulyDisabled),
      "aria-required": ariaAttr(isRequired),
      "data-readonly": dataAttr(isReadOnly),
      "aria-describedby": ariaDescribedBy,
      style: visuallyHiddenStyle
    };
  }, [
    isDisabled,
    isFocusable,
    id,
    name,
    value,
    handleChange,
    onBlur,
    onFocus,
    onKeyDown,
    onKeyUp,
    isChecked,
    isReadOnly,
    isRequired,
    isInvalid,
    ariaDescribedBy
  ]);
  const getLabelProps = (props2 = {}, ref = null) => ({
    ...props2,
    ref,
    onMouseDown: callAllHandlers(props2.onMouseDown, stop),
    onTouchStart: callAllHandlers(props2.onTouchStart, stop),
    "data-disabled": dataAttr(isDisabled),
    "data-checked": dataAttr(isChecked),
    "data-invalid": dataAttr(isInvalid)
  });
  const getRootProps = (props2, ref = null) => ({
    ...props2,
    ref,
    "data-disabled": dataAttr(isDisabled),
    "data-checked": dataAttr(isChecked),
    "data-invalid": dataAttr(isInvalid)
  });
  const state = {
    isInvalid,
    isFocused,
    isChecked,
    isActive,
    isHovered,
    isDisabled,
    isReadOnly,
    isRequired
  };
  return {
    state,
    getCheckboxProps: getRadioProps,
    getInputProps,
    getLabelProps,
    getRootProps,
    htmlProps
  };
}
function stop(event) {
  event.preventDefault();
  event.stopPropagation();
}

// src/radio.tsx
var Radio = (0, import_system2.forwardRef)((props, ref) => {
  const group = useRadioGroupContext();
  const { onChange: onChangeProp, value: valueProp } = props;
  const styles = (0, import_system2.useMultiStyleConfig)("Radio", { ...group, ...props });
  const ownProps = (0, import_system2.omitThemingProps)(props);
  const {
    spacing = "0.5rem",
    children,
    isDisabled = group == null ? void 0 : group.isDisabled,
    isFocusable = group == null ? void 0 : group.isFocusable,
    inputProps: htmlInputProps,
    ...rest
  } = ownProps;
  let isChecked = props.isChecked;
  if ((group == null ? void 0 : group.value) != null && valueProp != null) {
    isChecked = group.value === valueProp;
  }
  let onChange = onChangeProp;
  if ((group == null ? void 0 : group.onChange) && valueProp != null) {
    onChange = callAll(group.onChange, onChangeProp);
  }
  const name = (props == null ? void 0 : props.name) ?? (group == null ? void 0 : group.name);
  const {
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    getRootProps,
    htmlProps
  } = useRadio({
    ...rest,
    isChecked,
    isFocusable,
    isDisabled,
    onChange,
    name
  });
  const [layoutProps, otherProps] = split(htmlProps, import_system2.layoutPropNames);
  const checkboxProps = getCheckboxProps(otherProps);
  const inputProps = getInputProps(htmlInputProps, ref);
  const labelProps = getLabelProps();
  const rootProps = Object.assign({}, layoutProps, getRootProps());
  const rootStyles = {
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top",
    cursor: "pointer",
    position: "relative",
    ...styles.container
  };
  const checkboxStyles = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    ...styles.control
  };
  const labelStyles = {
    userSelect: "none",
    marginStart: spacing,
    ...styles.label
  };
  return /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.label, {
    className: "chakra-radio",
    ...rootProps,
    __css: rootStyles
  }, /* @__PURE__ */ import_react.default.createElement("input", {
    className: "chakra-radio__input",
    ...inputProps
  }), /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.span, {
    className: "chakra-radio__control",
    ...checkboxProps,
    __css: checkboxStyles
  }), children && /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.span, {
    className: "chakra-radio__label",
    ...labelProps,
    __css: labelStyles
  }, children));
});
Radio.displayName = "Radio";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Radio,
  RadioGroup,
  useRadio,
  useRadioGroup,
  useRadioGroupContext
});
