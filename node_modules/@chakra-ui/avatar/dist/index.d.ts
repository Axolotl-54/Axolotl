import * as _chakra_ui_system from '@chakra-ui/system';
import { SystemProps, HTMLChakraProps, ThemingProps, SystemStyleObject, ChakraComponent } from '@chakra-ui/system';

interface AvatarOptions {
    /**
     * The name of the person in the avatar.
     *
     * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`
     * - If `src` is not loaded, the name will be used to create the initials
     */
    name?: string;
    /**
     * If `true`, the `Avatar` will show a border around it.
     *
     * Best for a group of avatars
     */
    showBorder?: boolean;
    /**
     * The badge in the bottom right corner of the avatar.
     */
    children?: React.ReactNode;
    /**
     * The image url of the `Avatar`
     */
    src?: string;
    /**
     * List of sources to use for different screen resolutions
     */
    srcSet?: string;
    /**
     * Defines loading strategy
     */
    loading?: "eager" | "lazy";
    /**
     * The border color of the avatar
     * @type SystemProps["borderColor"]
     */
    borderColor?: SystemProps["borderColor"];
    /**
     * Function called when image failed to load
     */
    onError?: () => void;
    /**
     * The default avatar used as fallback when `name`, and `src`
     * is not specified.
     * @type React.ReactElement
     */
    icon?: React.ReactElement;
    /**
     * Function to get the initials to display
     */
    getInitials?: (name: string) => string;
    /**
     * Defining which referrer is sent when fetching the resource.
     * @type React.HTMLAttributeReferrerPolicy
     */
    referrerPolicy?: React.HTMLAttributeReferrerPolicy;
}

interface AvatarProps extends Omit<HTMLChakraProps<"span">, "onError">, AvatarOptions, ThemingProps<"Avatar"> {
    iconLabel?: string;
    /**
     * If `true`, opt out of the avatar's `fallback` logic and
     * renders the `img` at all times.
     */
    ignoreFallback?: boolean;
}
/**
 * Avatar component that renders an user avatar with
 * support for fallback avatar and name-only avatars
 */
declare const Avatar: _chakra_ui_system.ComponentWithAs<"span", AvatarProps>;

interface AvatarGroupOptions {
    /**
     * The children of the avatar group.
     *
     * Ideally should be `Avatar` and `MoreIndicator` components
     */
    children: React.ReactNode;
    /**
     * The space between the avatars in the group.
     * @default "-0.75rem"
     * @type SystemProps["margin"]
     */
    spacing?: SystemProps["margin"];
    /**
     * The maximum number of visible avatars
     */
    max?: number;
}
interface AvatarGroupProps extends AvatarGroupOptions, Omit<HTMLChakraProps<"div">, "children">, ThemingProps<"Avatar"> {
}
/**
 * AvatarGroup displays a number of avatars grouped together in a stack.
 */
declare const AvatarGroup: _chakra_ui_system.ComponentWithAs<"div", AvatarGroupProps>;

declare type BadgePlacement = "top-start" | "top-end" | "bottom-start" | "bottom-end";
interface AvatarBadgeProps extends HTMLChakraProps<"div"> {
    placement?: BadgePlacement;
}
/**
 * AvatarBadge used to show extra badge to the top-right
 * or bottom-right corner of an avatar.
 */
declare const AvatarBadge: _chakra_ui_system.ComponentWithAs<"div", AvatarBadgeProps>;

declare const useAvatarStyles: () => Record<string, SystemStyleObject>;

/**
 * Fallback avatar react component.
 * This should be a generic svg used to represent an avatar
 */
declare const GenericAvatarIcon: ChakraComponent<"svg">;

export { Avatar, AvatarBadge, AvatarBadgeProps, AvatarGroup, AvatarGroupProps, AvatarProps, GenericAvatarIcon, useAvatarStyles };
